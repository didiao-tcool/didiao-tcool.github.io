<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初学JavaScript</title>
    <link href="/2021/09/28/%E5%88%9D%E5%AD%A6JavaScript/"/>
    <url>/2021/09/28/%E5%88%9D%E5%AD%A6JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="初学JavaScript"><a href="#初学JavaScript" class="headerlink" title="初学JavaScript"></a>初学JavaScript</h1><h2 id="大千世界，奥妙无穷，我们穷一生仍不能学习其皮毛。✨"><a href="#大千世界，奥妙无穷，我们穷一生仍不能学习其皮毛。✨" class="headerlink" title="大千世界，奥妙无穷，我们穷一生仍不能学习其皮毛。✨"></a>大千世界，奥妙无穷，我们穷一生仍不能学习其皮毛。✨</h2><h2 id="2-计算机基础"><a href="#2-计算机基础" class="headerlink" title="2.计算机基础"></a>2.计算机基础</h2><h3 id="2-3数据存储单位"><a href="#2-3数据存储单位" class="headerlink" title="2.3数据存储单位"></a>2.3数据存储单位</h3><p>bit &lt; byte &lt; kb &lt; GB &lt; TB &lt; …</p><ul><li>位(bit): 1bit可以保存一个0或者1(最小的存储单位)</li><li>字节(Byte) : 1B= 8b</li><li>千字节(KB):1KB= 1024B</li><li>兆字节(MB):1MB= 1024KB</li><li>吉字节(GB): 1GB= 1024MB</li><li>太字节(TB): 1TB= 1024GB</li><li>…</li></ul><h2 id="1-初识JavaScript"><a href="#1-初识JavaScript" class="headerlink" title="1.初识JavaScript"></a>1.初识JavaScript</h2><h3 id="1-1-JavaScript-历史"><a href="#1-1-JavaScript-历史" class="headerlink" title="1.1 JavaScript 历史"></a>1.1 JavaScript 历史</h3><ul><li>布兰登·艾奇( Brendan Eich，1961年~)</li><li>神奇的大哥在1995年利用10天完成JavaScript设计。</li><li>网景公司最初命名为LiveScript，后来在与Sun合作之后将其改名为JavaScript。</li></ul><h3 id="1-2-JavaScript是什么"><a href="#1-2-JavaScript是什么" class="headerlink" title="1.2 JavaScript是什么"></a>1.2 JavaScript是什么</h3><ul><li>JavaScript是世界上最流行的语言之一，是一种运行在客户端的脚本语言( Script是脚本的意思)</li><li>脚本语言∶不需要编译，运行过程中由js解释器(js引擎）逐行来进行解释并执行</li><li>现在也可以基于Node.js技术进行服务器端编程</li></ul><h3 id="1-3-JavaScript-的作用"><a href="#1-3-JavaScript-的作用" class="headerlink" title="1.3 JavaScript 的作用"></a>1.3 JavaScript 的作用</h3><ul><li>表单动态校验（密码强度检测)(JS产生最初的目的)</li><li>网页特效</li><li>服务端开发(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova)</li><li>控制硬件-物联网(Ruff)</li><li>游戏开发(cocos2d-js)</li></ul><h3 id="1-4-HTML-CSS-JS的关系"><a href="#1-4-HTML-CSS-JS的关系" class="headerlink" title="1.4 HTML/CSS/JS的关系"></a>1.4 HTML/CSS/JS的关系</h3><p><strong>HTML / CSS 标记语言–描述类语言</strong></p><ul><li>HTML决定网页结构和内容(决定看到什么)，相当于人的身体</li><li>CSS决定网页呈现给用户的模样(决定好不好看)，相当于给人穿衣服、化妆</li></ul><p><strong>JS 脚本语言 –编程类语言</strong></p><ul><li>相当实现业务逻辑和页面控制(决定功能)，相当于人的各种动作</li></ul><h3 id="1-4浏览器执行JS简介"><a href="#1-4浏览器执行JS简介" class="headerlink" title="1.4浏览器执行JS简介"></a>1.4浏览器执行JS简介</h3><p>浏览器分成两部分∶渲染引擎和JS引擎</p><ul><li><strong>渲染引擎</strong>︰用来解析HTML与CSS，俗称内核，比如chrome浏览器的blink，老版本的webkit</li><li><strong>JS引擎</strong>:也称为JS解释器。用来读取网页中的JavaScript代码，对其处理后运行，比如chrome浏览器的V8</li></ul><p><strong>浏览器本身并不会执行JIS代码，而是通过内置JavaScript引擎(解释器)来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以JavaScript 语言归为脚本语言，会逐行解释执行。</strong></p><h3 id="1-5-JS-的组成"><a href="#1-5-JS-的组成" class="headerlink" title="1.5 JS 的组成"></a>1.5 JS 的组成</h3><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\javascript.png" width=600px/><h3 id="1-ECMAScript"><a href="#1-ECMAScript" class="headerlink" title="1.ECMAScript"></a>1.ECMAScript</h3><p><strong>ECMAScript</strong>是由ECMA国际（原欧洲计算机制造商协会)进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMAScript语言的实现和扩展。</p><p><strong>ECMAScript : ECMAScript规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</strong></p><h3 id="2-DOM——文档对象模型"><a href="#2-DOM——文档对象模型" class="headerlink" title="2.DOM——文档对象模型"></a>2.DOM——文档对象模型</h3><p><strong>文档对象模型</strong>（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的<strong>标准编程接口</strong>。通过DOM提供的接口可以对页面上的各种元素进行操作(大小、位置、颜色等)。</p><h3 id="3-BOM——浏览器对象模型"><a href="#3-BOM——浏览器对象模型" class="headerlink" title="3.BOM——浏览器对象模型"></a>3.BOM——浏览器对象模型</h3><p><strong>BOM</strong>(Browser Object Model，简称BOM)是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p><h3 id="1-6-JS-初体验"><a href="#1-6-JS-初体验" class="headerlink" title="1.6 JS 初体验"></a>1.6 JS 初体验</h3><p>JS有3种书写位置，分别为行内、内嵌和外部。</p><ol><li>行内式JS</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我试试&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert (&#x27;Hello world&#x27; ) &quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>可以将单行或少量JS代码写在HTML标签的事件属性中(以on开头的属性），如：onclick</li><li>注意单双引号的使用∶在<strong>HTML</strong>中我们推荐使用<strong>双引号</strong>，<strong>JS</strong>中我们推荐使用<strong>单引号</strong></li><li>可读性差，在html中编写JS大量代码时，不方便阅读</li><li>引号易错，引号多层嵌套匹配时，非常容易弄混</li><li>特殊情况下使用</li></ul><ol start="2"><li>内嵌JS</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">alert ( <span class="hljs-string">&#x27;Hello world~! &#x27;</span> ) ;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>可以将多行JS代码写到<code>&lt;script&gt;</code>标签中</li><li>内嵌JS是学习时常用的方式</li></ul><ol start="3"><li>外部JS文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;my.js&quot;</span>&gt;</span>&lt;/ script&gt;<br></code></pre></td></tr></table></figure><ul><li>利于HTML页面代码结构化，把大段JS代码独立到HTML页面之外，既美观，也方便文件级别的复用</li><li>引用外部JS文件的script标签中间不可以写代码</li><li>适合于JS代码量比较大的情况</li></ul><h2 id="3-JavaScript-输入输出语句"><a href="#3-JavaScript-输入输出语句" class="headerlink" title="3. JavaScript 输入输出语句"></a>3. JavaScript 输入输出语句</h2><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下︰</p><table><thead><tr><th>说明</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><h2 id="1-变量概述"><a href="#1-变量概述" class="headerlink" title="1. 变量概述"></a>1. 变量概述</h2><h3 id="1-1-什么是变量"><a href="#1-1-什么是变量" class="headerlink" title="1.1. 什么是变量"></a>1.1. 什么是变量</h3><p>白话: 变量就是一个装东西的盒子。</p><p>通俗∶变量是用于存放数据的容器。我们通过变量名获取数据，甚至数据可以修改。</p><p>本质：变量是程序在内存中申请的一块用来存放数据的空间。</p><h2 id="2-变量的使用"><a href="#2-变量的使用" class="headerlink" title="2. 变量的使用"></a>2. 变量的使用</h2><p>变量在使用时分为两步：1.声明变量⒉赋值</p><ol><li>声明变量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明变量</span><br><span class="hljs-keyword">var</span> age; <span class="hljs-comment">//声明一个名称为age的变量</span><br></code></pre></td></tr></table></figure><ul><li>var是一个JS关键字，用来声明变量(variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</li><li>age是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</li></ul><ol start="2"><li>赋值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">age = <span class="hljs-number">10</span>;  <span class="hljs-comment">//给age这个变量赋值为10</span><br></code></pre></td></tr></table></figure><ul><li>= 用来把右边的值赋给左边的变量空间中此处代表赋值的意思</li><li>变量值是程序员保存到变量空间里的值</li></ul><h2 id="3-变量的初始化"><a href="#3-变量的初始化" class="headerlink" title="3. 变量的初始化"></a>3. 变量的初始化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age=<span class="hljs-number">18</span>;  <span class="hljs-comment">//声明变量同时赋值为18</span><br></code></pre></td></tr></table></figure><p>声明一个变量并赋值，我们称之为<strong>变量的初始化。</strong></p><h2 id="1-4变量语法扩展"><a href="#1-4变量语法扩展" class="headerlink" title="1.4变量语法扩展"></a>1.4变量语法扩展</h2><h3 id="3-声明变量特殊情况"><a href="#3-声明变量特殊情况" class="headerlink" title="3.声明变量特殊情况"></a>3.声明变量特殊情况</h3><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var age ; console.log (age);</td><td>只声明不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明不赋值 直接使用</td><td>报错</td></tr><tr><td>age = 10; console.log (age);</td><td>不声明只赋值</td><td>10</td></tr></tbody></table><h2 id="1-数据类型简介"><a href="#1-数据类型简介" class="headerlink" title="1. 数据类型简介"></a>1. 数据类型简介</h2><h3 id="1-2-变量的数据类型"><a href="#1-2-变量的数据类型" class="headerlink" title="1.2 变量的数据类型"></a>1.2 变量的数据类型</h3><p>变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。<strong>JavaScript是一种弱类型或者说动态语言</strong>。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;<span class="hljs-comment">//这是一个数字型</span><br><span class="hljs-keyword">var</span> areYouok = <span class="hljs-string">&#x27;是的&#x27;</span>;<span class="hljs-comment">//这是一个字符串</span><br></code></pre></td></tr></table></figure><p>在代码运行时，变量的数据类型是由 JS 引擎 <strong>根据=右边变量值的数据类型来判断</strong>的，运行完毕之后，变量就确定了数据类型。</p><p><strong>JavaScript拥有动态类型，同时也意味着相同的变量可用作不同的类型∶⭐⭐⭐</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> = <span class="hljs-number">6</span>;<span class="hljs-comment">//x为数字</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;Bill&quot;</span>;<span class="hljs-comment">//x为字符串</span><br></code></pre></td></tr></table></figure><h3 id="1-3数据类型的分类"><a href="#1-3数据类型的分类" class="headerlink" title="1.3数据类型的分类"></a>1.3数据类型的分类</h3><p>JS 把数据类型分为两类∶</p><ul><li>简单数据类型( Number, string,Boolean,Undefined,Nul1)</li><li>复杂数据类型( object)</li></ul><h2 id="2-简单数据类型"><a href="#2-简单数据类型" class="headerlink" title="2.简单数据类型"></a>2.简单数据类型</h2><h3 id="2-1简单数据类型（基本数据类型"><a href="#2-1简单数据类型（基本数据类型" class="headerlink" title="2.1简单数据类型（基本数据类型)"></a>2.1简单数据类型（基本数据类型)</h3><p>JavaScript中的简单数据类型及其说明如下︰</p><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整型值和浮点型值，如21、0.21</td><td>0</td></tr><tr><td>Boolean</td><td>布尔值类型，如true 、 false，等价于1和0</td><td>false</td></tr><tr><td>String</td><td>字符串类型，如”张三”注意咱们js 里面，字符串都带引号</td><td>“”</td></tr><tr><td>Undefined</td><td>var a;声明了变量a但是没有给值，此时a = undefined</td><td>undefined</td></tr><tr><td>Null</td><td>var a = null;声明了变量a 为空值</td><td>null</td></tr></tbody></table><h3 id="2-2数字型Number"><a href="#2-2数字型Number" class="headerlink" title="2.2数字型Number"></a>2.2数字型Number</h3><h3 id="1-数字型进制"><a href="#1-数字型进制" class="headerlink" title="1.数字型进制"></a>1.数字型进制</h3><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.八进制数字序列范围:0~7var numl = 07;//对应十进制的7var num2 = 011;//对应十进制的9var num3 = 08;//对应＋进制的8//2.十六进制数字序列范围:0~9以及A~Fvar num = 0xA;//对应十进制的10</span><br></code></pre></td></tr></table></figure><p>现阶段我们只需要记住，<strong>在JS中 八进制前面 加0 ，十六进制前面 加0x</strong></p><h3 id="2-数字型范围"><a href="#2-数字型范围" class="headerlink" title="2. 数字型范围"></a>2. 数字型范围</h3><p>JavaScript中数值的最大和最小值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">alert(<span class="hljs-built_in">Number</span>.MAX_VALUE); <span class="hljs-comment">// 1.7976931348623157e+308alert(Number.MIN_VALUE); // 5e-324</span><br></code></pre></td></tr></table></figure><h3 id="3-数字型三个特殊值"><a href="#3-数字型三个特殊值" class="headerlink" title="3.数字型三个特殊值"></a>3.数字型三个特殊值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">alert (<span class="hljs-literal">Infinity</span>) ; <span class="hljs-comment">// Infinityalert (-Infinity) ; // -Infinityalert (NaN) ;// NaN</span><br></code></pre></td></tr></table></figure><ul><li>lnfinity ，代表无穷大，大于任何数值</li><li>-Infinity ，代表无穷小，小于任何数值</li><li>NaN ，Not a number，代表一个非数值</li></ul><h3 id="2-2数字型Number-1"><a href="#2-2数字型Number-1" class="headerlink" title="2.2数字型Number"></a>2.2数字型Number</h3><h3 id="4-isNaN"><a href="#4-isNaN" class="headerlink" title="4. isNaN( )"></a>4. isNaN( )</h3><p>用来判断一个变量是否为非数字的类型，返回true或者false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> usrAge = <span class="hljs-number">21</span>;<span class="hljs-keyword">var</span> isok = <span class="hljs-built_in">isNaN</span> (userAge);<span class="hljs-built_in">console</span>.log (isNum);<span class="hljs-comment">//false , 21不是一个非数字var usrName = &quot;andy&quot;;console.log (isNaN (userName));//true , &quot;andy&quot;是一个非数字</span><br></code></pre></td></tr></table></figure><h3 id="2-3字符串型-String"><a href="#2-3字符串型-String" class="headerlink" title="2.3字符串型 String"></a>2.3字符串型 String</h3><p>字符串型可以是引号中的任意文本，其语法为**双引号 “ “ **和 <strong>单引号 ‘ ‘</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> strMsg =<span class="hljs-string">&quot;我爱北京天安门~&quot;</span>; <span class="hljs-comment">//使用双引号表示字符串var strMsg2 =&#x27;我爱吃猪蹄~&#x27;;//使用单引号表示字符串//常见错误var strMsg3 = 我爱大肘子;//报错，没使用引号，会被认为是js代码，但js没有这些语法</span><br></code></pre></td></tr></table></figure><p>因为HTML标签里面的属性使用的是双引号，JS这里我们<strong>更推荐使用单引号</strong>。</p><h3 id="1-字符串引号嵌套"><a href="#1-字符串引号嵌套" class="headerlink" title="1.字符串引号嵌套"></a>1.字符串引号嵌套</h3><p>JS可以用<strong>单引号嵌套双引号</strong>，或者用<strong>双引号嵌套单引号</strong>(<strong>外双内单，外单内双</strong>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> strMsg =<span class="hljs-string">&#x27;我是&quot;高帅富&quot;程序猿&#x27;</span>;<span class="hljs-comment">//可以用&#x27;&#x27;包含&quot;&quot;var strMsg2 =&quot;我是′高帅富&#x27;程序猿&quot;;//也可以用&quot;&quot;包含&#x27;&#x27;//常见错误var badQuotes = &#x27;what on earth?&quot;;//报错，不能单双引号搭配</span><br></code></pre></td></tr></table></figure><h3 id="2-字符串转义符"><a href="#2-字符串转义符" class="headerlink" title="2.字符串转义符"></a>2.字符串转义符</h3><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>转义符都是\开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行符，n 是 newline 的意思</td></tr><tr><td><code>\\</code></td><td>斜杠 \</td></tr><tr><td><code>\&#39;</code></td><td>‘  单引号</td></tr><tr><td><code>\&quot;</code></td><td>“  双引号</td></tr><tr><td><code>\t</code></td><td>tab 缩进</td></tr><tr><td><code>\b</code></td><td>空格，b是 blank 的意思</td></tr></tbody></table><h3 id="3-字符串长度"><a href="#3-字符串长度" class="headerlink" title="3.字符串长度"></a>3.字符串长度</h3><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的length属性可以获取整个字符串的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> strMsg =<span class="hljs-string">&quot;我是帅气多金的程序猿! &quot;</span>;alert(strMsg.length); <span class="hljs-comment">//显示11</span><br></code></pre></td></tr></table></figure><h3 id="4-字符串拼接"><a href="#4-字符串拼接" class="headerlink" title="4.字符串拼接"></a>4.字符串拼接</h3><ul><li>多个字符串之间可以使用＋进行拼接，其拼接方式为 <strong>字符串＋任何类型=拼接之后的新字符串</strong></li><li>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.1字符串&quot;相加&quot;alert ( &#x27;hello&#x27; + &#x27;&#x27; + &#x27;world&#x27; ) ;//he1lo world;//1.2数值字符串&quot;相加&quot;alert ( &#x27;100&#x27; + &#x27;100 &#x27; ) ;  //100100// 1.3数值字符串＋数值alert ( &#x27;11&#x27; + 12);//&#x27;1112&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>总结口诀:数值相加，字符相连</strong></p><h3 id="2-5布尔型Boolean"><a href="#2-5布尔型Boolean" class="headerlink" title="2.5布尔型Boolean"></a>2.5布尔型Boolean</h3><p>布尔类型有两个值:true和false ，其中true表示真(对），而false表示假（错)。</p><p>布尔型和数字型相加的时候，true的值为1 ，false的值为0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log (<span class="hljs-literal">true</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">//2console.log (false + 1) ; //1</span><br></code></pre></td></tr></table></figure><h3 id="2-6-Undefined和Null"><a href="#2-6-Undefined和Null" class="headerlink" title="2.6 Undefined和Null"></a>2.6 Undefined和Null</h3><p>一个声明后没有被赋值的变量会有一个默认值undefined(如果进行相连或者相加时，注意结果)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> variable;<span class="hljs-built_in">console</span>.log(variable) ;<span class="hljs-comment">//undefinedconsole.log (&#x27;你好&#x27;+ variable) ; //你好undefinedconsole.log(11 + variable) ;//NaNconsole.log(true + variable) ;//NaN</span><br></code></pre></td></tr></table></figure><p>一个声明变量给null值，里面存的值为空（学习对象时，我们继续研究null)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vari = <span class="hljs-literal">null</span>;<span class="hljs-built_in">console</span>.log ( <span class="hljs-string">&#x27;你好&#x27;</span>+ vari) ; <span class="hljs-comment">//你好nullconsole.log(11 + vari) ;// 11console.log(true + vari) ;//1</span><br></code></pre></td></tr></table></figure><h3 id="3-1获取检测变量的数据类型"><a href="#3-1获取检测变量的数据类型" class="headerlink" title="3.1获取检测变量的数据类型"></a>3.1获取检测变量的数据类型</h3><p>typeof可用来获取检测变量的数据类型</p><h3 id="3-2字面量"><a href="#3-2字面量" class="headerlink" title="3.2字面量"></a>3.2字面量</h3><p>字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><ul><li>数字字面量：8,9,10</li><li>字符串字面量：’黑马程序员’,”大前端”</li><li>布尔字面量：true, false</li></ul><h2 id="4-数据类型的转换"><a href="#4-数据类型的转换" class="headerlink" title="4. 数据类型的转换"></a>4. 数据类型的转换</h2><h3 id="4-2转换为字符串"><a href="#4-2转换为字符串" class="headerlink" title="4.2转换为字符串"></a>4.2转换为字符串</h3><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>转成字符串</td><td>var num= 1; alert(num.toString());</td></tr><tr><td>String()强制转换</td><td>转成字符串</td><td>var num = 1 ; alert(String(num));</td></tr><tr><td><strong>加号拼接字符串</strong></td><td>和字符串拼接的结果都是字符串</td><td>var num = 1; alert(num+”我是字符串”);</td></tr></tbody></table><ul><li>toString)和String)使用方式不一样。</li><li>三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式，这一种方式也称之为隐式转换。</li></ul><h3 id="4-3转换为数字型（重点"><a href="#4-3转换为数字型（重点" class="headerlink" title="4.3转换为数字型（重点)"></a>4.3转换为数字型（重点)</h3><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><strong>parseInt(string)函数</strong></td><td>将string类型转成整数数值型</td><td>parselnt(78’)</td></tr><tr><td><strong>parseFloat(string)函数</strong></td><td>将string类型转成浮点数数值型</td><td>parseFloat(‘78.21’)</td></tr><tr><td>Number()强制转换函数</td><td>将string类型转换为数值型</td><td>Number(‘12’)</td></tr><tr><td>js隐式转换( - * /)</td><td>利用算术运算隐式转换为数值型</td><td>‘12’- 0</td></tr></tbody></table><ul><li>注意 parselnt 和 parseFloat <strong>单词的大小写</strong>，这2个是重点</li></ul><h3 id="4-4转换为布尔型"><a href="#4-4转换为布尔型" class="headerlink" title="4.4转换为布尔型"></a>4.4转换为布尔型</h3><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转成布尔值</td><td>Boolean(‘true’);</td></tr></tbody></table><ul><li>代表<strong>空、否定的值</strong>会被转换为<strong>false</strong>，如”、0、NaN、null、undefined</li><li>其余值都会被转换为true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log (<span class="hljs-built_in">Boolean</span> ( <span class="hljs-string">&#x27;&#x27;</span> )) ;  <span class="hljs-comment">//falseconsole.log (Boolean (0) ) ;  //falseconsole.log ( Boolean (NaN) ) ;  //falseconsole.log(Boolean(null));  //falseconsole.log (Boolean (undefined)) ;   //falseconsole.log (Boolean ( &#x27;小白&#x27;));  //trueconsole.log( Boolean ( 12));   //true</span><br></code></pre></td></tr></table></figure><h2 id="1-解释型语言和编译型语言"><a href="#1-解释型语言和编译型语言" class="headerlink" title="1.解释型语言和编译型语言"></a>1.解释型语言和编译型语言</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</p><p>编程语言 -&gt; 翻译器 -&gt; 机器语言（二进制)</p><ul><li>翻译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译的时间点不同</strong></li><li>编译器是在<strong>代码执行之前进行编译</strong>，生成中间代码文件</li><li>解释器是在<strong>运行时进行及时解释</strong>，并立即执行(当编译器以解释方式运行的时候，也称之为解释器)</li></ul><h2 id="2-标识符、关键字、保留字"><a href="#2-标识符、关键字、保留字" class="headerlink" title="2.标识符、关键字、保留字"></a>2.标识符、关键字、保留字</h2><h3 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1.标识符"></a>1.标识符</h3><p>标识(zhi)符︰就是指开发人员为变量、属性、函数、参数取的名字。</p><p><strong>标识符不能是关键字或保留字。</strong></p><h3 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2.关键字"></a>2.关键字</h3><p>关键字︰是指JS本身已经使用了的字，不能再用它们充当变量名、方法名。</p><p>包括 : break、case、catch、continue、default、delete、do、else、finally、for、function、if、in.instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with等。</p><h3 id="3-保留字"><a href="#3-保留字" class="headerlink" title="3.保留字"></a>3.保留字</h3><p>保留字︰实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p><p>包括: boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、 short、static、super、synchronized、throws、transient、volatile等。</p><h2 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1.运算符"></a>1.运算符</h2><p>运算符( operator )也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p><p>JavaScript中常用的运算符有:</p><ul><li>算数运算符</li><li>递增和递减运算符比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h3 id="2-2浮点数的精度问题"><a href="#2-2浮点数的精度问题" class="headerlink" title="2.2浮点数的精度问题"></a>2.2浮点数的精度问题</h3><p>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-number">0.1</span>+ <span class="hljs-number">0.2</span>; <span class="hljs-comment">//结果不是0.3，而是∶0.30000000000000004console.log (0.07 * 100); //结果不是7，而是∶7.0000000ooo00001</span><br></code></pre></td></tr></table></figure><p>所以∶<strong>不要直接判断两个浮点数是否相等!</strong></p><h3 id="2-4表达式和返回值"><a href="#2-4表达式和返回值" class="headerlink" title="2.4表达式和返回值"></a>2.4表达式和返回值</h3><p><strong>表达式</strong>∶是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合</p><p>简单理解∶是由数字、运算符、变量等组成的式子</p><p><strong>表达式最终都会有一个结果，返回给我们，我们成为返回值</strong></p><h3 id="3-2-递增运算符"><a href="#3-2-递增运算符" class="headerlink" title="3.2 递增运算符"></a>3.2 递增运算符</h3><p><strong>1.前置递增运算符</strong></p><p><strong>++num</strong>前置递增，就是自加1，类似于num = num + 1，但是++num写起来更简单。</p><p>使用口诀∶<strong>先自加，后返回值</strong></p><p><strong>2.后置递增运算符</strong></p><p>**num++**后置递增，就是自加1，类似于num = num + 1，但是num++写起来更简单。</p><p>使用口诀∶<strong>先返回原值，后自加</strong></p><h2 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4.比较运算符"></a>4.比较运算符</h2><h3 id="4-1比较运算符概述"><a href="#4-1比较运算符概述" class="headerlink" title="4.1比较运算符概述"></a>4.1比较运算符概述</h3><p>概念︰比较运算符（关系运算符）是<strong>两个数据进行比较时所使用的运算符</strong>，比较运算后，会<strong>返回一个布尔值</strong>( true / false )作为比较运算的结果。</p><table><thead><tr><th>运算符名称</th><th>说明</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>小于号</td><td>1&lt;2</td><td>true</td></tr><tr><td><code>&gt;</code></td><td>大于号</td><td>1&gt;2</td><td>false</td></tr><tr><td><code>&gt;=</code></td><td>大于等于号(大于或者等于)</td><td>2 &gt;= 2</td><td>true</td></tr><tr><td><code>&lt;=</code></td><td>小于等于号(小于或者等于)</td><td>3&lt;= 2</td><td>false</td></tr><tr><td><code>==</code></td><td>判等号（会转型)</td><td>37 == 37</td><td>true</td></tr><tr><td><code>!=</code></td><td>不等号（会转型)</td><td>37 != 37</td><td>false</td></tr><tr><td><code>===</code> <code>!==</code></td><td>全等要求值和数据类型都一致</td><td>37 === ‘37’</td><td>false</td></tr></tbody></table><h3 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h3><h3 id="5-1逻辑运算符概述"><a href="#5-1逻辑运算符概述" class="headerlink" title="5.1逻辑运算符概述"></a>5.1逻辑运算符概述</h3><p>概念︰逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</p><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>“逻辑与”，简称”与” and</td><td>true <code>&amp;&amp;</code> false</td></tr><tr><td>`</td><td></td><td>`</td></tr><tr><td><code>!</code></td><td>“逻辑非”，简称”非”not</td><td>! true</td></tr></tbody></table><h3 id="5-4短路运算（逻辑中断-⭐⭐⭐"><a href="#5-4短路运算（逻辑中断-⭐⭐⭐" class="headerlink" title="5.4短路运算（逻辑中断)⭐⭐⭐"></a>5.4短路运算（逻辑中断)⭐⭐⭐</h3><p><strong>短路运算的原理</strong>∶当有多个表达式(值)时左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p><p><strong>1. 逻辑与</strong></p><p>语法：<strong>表达式1 &amp;&amp; 表达式2</strong></p><ul><li>如果第一个表达式的值为真，则返回表达式2</li><li>如果第一个表达式的值为假，则返回表达式1</li></ul><p><strong>2. 逻辑或</strong></p><p>语法：<strong>表达式1 || 表达式2</strong></p><ul><li>如果第一个表达式的值为真，则返回表达式1</li><li>如果第一个表达式的值为假，则返回表达式2</li></ul><h2 id="逻辑中断•自我总结⭐⭐⭐"><a href="#逻辑中断•自我总结⭐⭐⭐" class="headerlink" title="逻辑中断•自我总结⭐⭐⭐"></a>逻辑中断•自我总结⭐⭐⭐</h2><p><strong>&amp;&amp;</strong> 进行<strong>逻辑中断时</strong>，如果前一个值为 true，就会去看下一个值，</p><p><strong>直至遇到 false</strong> 把 false 的表达式输出，</p><p>或者 将<strong>最后一个表达式</strong>输出。</p><hr><p><strong>||</strong> 进行<strong>逻辑中断时</strong>，如果前一个值为 false，就会去看下一个值，</p><p><strong>直至遇到 true</strong> 把 true 的表达式输出，</p><p>或者 将<strong>最后一个表达式</strong>输出。</p><h2 id="6-赋值运算符"><a href="#6-赋值运算符" class="headerlink" title="6.赋值运算符"></a>6.赋值运算符</h2><p>概念∶用来把数据赋值给变量的运算符。</p><table><thead><tr><th>赋值运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td><td>var usrName = ‘我是值”;</td></tr><tr><td>+= 、 -=</td><td>加、减一个数后在赋值</td><td>var age = 10; age+=5; //15</td></tr><tr><td>*=、/=、%=</td><td>乘、除、取模后在赋值</td><td>var age = 2; age*=5; //10</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;age += <span class="hljs-number">5</span>; <span class="hljs-comment">//相当于age = age + 5;age -= 5; //相当于age = age - s;age *=10; //相当于age = age * 10;</span><br></code></pre></td></tr></table></figure><h2 id="7-运算符优先级"><a href="#7-运算符优先级" class="headerlink" title="7.运算符优先级"></a>7.运算符优先级</h2><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td><code>()</code></td></tr><tr><td>2</td><td>一元运算符</td><td><code>++ -- !</code></td></tr><tr><td>3</td><td>算数运算符</td><td><strong>先<code>* / %</code>后<code>+ -</code></strong></td></tr><tr><td>4</td><td>关系运算符</td><td><code>&gt; &gt;= &lt; &lt;=</code></td></tr><tr><td>5</td><td>相等运算符</td><td><code>== != === !==</code></td></tr><tr><td>6</td><td>逻辑运算符</td><td>**先<code>&amp;&amp;</code>后`</td></tr><tr><td>7</td><td>赋值运算符</td><td><code>=</code></td></tr><tr><td>8</td><td>逗号运算符</td><td><code>,</code></td></tr></tbody></table><h2 id="1-流程控制"><a href="#1-流程控制" class="headerlink" title="1.流程控制"></a>1.流程控制</h2><p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。</p><p>简单理解∶流程控制就是来控制我们的代码按照什么结构顺序来执行</p><p>流程控制主要有三种结构，分别是<strong>顺序结构、分支结构</strong>和<strong>循环结构</strong>，这三种结构代表三种代码执行的顺序。</p><ul><li>顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照<strong>代码的先后顺序，依次执行</strong>，程序中大多数的代码都是这样执行的。</li></ul><h2 id="3-分支流程控制-if-语句"><a href="#3-分支流程控制-if-语句" class="headerlink" title="3.分支流程控制 if 语句"></a>3.分支流程控制 if 语句</h2><h3 id="3-1分支结构"><a href="#3-1分支结构" class="headerlink" title="3.1分支结构"></a>3.1分支结构</h3><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码(执行代码多选一的过程），从而得到不同的结果</p><p>JS语言提供了两种分支结构语句</p><ul><li>if 语句</li><li>switch 语句</li></ul><h3 id="3-3-if-else语句（双分支语句）"><a href="#3-3-if-else语句（双分支语句）" class="headerlink" title="3.3 if else语句（双分支语句）"></a>3.3 if else语句（双分支语句）</h3><h3 id="3-4-if-else-if-多分支语句"><a href="#3-4-if-else-if-多分支语句" class="headerlink" title="3.4 if else if 多分支语句"></a>3.4 if else if 多分支语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (...) &#123;     ...&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(...) &#123;     ...&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(...) &#123;     ...&#125; <span class="hljs-keyword">else</span> &#123;     ...&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-三元表达式"><a href="#3-5-三元表达式" class="headerlink" title="3.5 三元表达式"></a>3.5 三元表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">条件表达式 ？ 表达式<span class="hljs-number">1</span> ： 表达式<span class="hljs-number">2</span>；<br></code></pre></td></tr></table></figure><h3 id="3-6-switch-语句"><a href="#3-6-switch-语句" class="headerlink" title="3.6 switch 语句"></a>3.6 switch 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span>(表达式) &#123;    <span class="hljs-keyword">case</span> value1:        执行语句<span class="hljs-number">1</span>;        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">case</span> value:        执行语句<span class="hljs-number">2</span>;        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">default</span>:        执行最后的语句；&#125;<br></code></pre></td></tr></table></figure><h2 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4. 循环结构"></a>4. 循环结构</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (初始化变量；条件表达式；操作表达式) &#123;    循环体&#125;<br></code></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span> (条件表达式) &#123;    循环体&#125;<br></code></pre></td></tr></table></figure><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">do</span> &#123;    循环体&#125; <span class="hljs-keyword">while</span> (条件表达式)<span class="hljs-comment">// 先执行一次，在判断</span><br></code></pre></td></tr></table></figure><h3 id="continue-关键字"><a href="#continue-关键字" class="headerlink" title="continue 关键字"></a>continue 关键字</h3><p><strong>continue关键字用于</strong>立即<strong>跳出本次循环</strong>，<strong>继续下一次循环</strong>(本次循环体中continue之后的代码就会少执行一次)。</p><h3 id="break-关键字"><a href="#break-关键字" class="headerlink" title="break 关键字"></a>break 关键字</h3><p><strong>break关键字用于</strong>立即<strong>跳出整个循环</strong>（循环结束)。</p><h2 id="1-数组的概念"><a href="#1-数组的概念" class="headerlink" title="1. 数组的概念"></a>1. 数组的概念</h2><p>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将<strong>一组数据存储在单个变量名下</strong>的优雅方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//普通变量一次只能存储一个值var num = 10;//数组一次可以存储多个值var arr = [1,2,3,4,5];</span><br></code></pre></td></tr></table></figure><h3 id="2-1数组的创建方式"><a href="#2-1数组的创建方式" class="headerlink" title="2.1数组的创建方式"></a>2.1数组的创建方式</h3><p>JS中创建数组有两种方式：</p><ul><li>利用new创建数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">// 创建一个空数组</span><br></code></pre></td></tr></table></figure><ul><li>利用数组字面量创建数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = []; <span class="hljs-comment">// 创建了一个空数组var array = [1, 2, 3, &#x27;pink&#x27;, true]; // JS数组种可以放‘任意’数据类型！</span><br></code></pre></td></tr></table></figure><h2 id="3-获取数组元素"><a href="#3-获取数组元素" class="headerlink" title="3.获取数组元素"></a>3.获取数组元素</h2><h3 id="3-1数组的索引"><a href="#3-1数组的索引" class="headerlink" title="3.1数组的索引"></a>3.1数组的索引</h3><p>**索引(下标)**∶用来访问数组元素的序号（数组下标从0开始）</p><p>数组可以通过<strong>索引</strong>来访问、设置、修改对应的数组元素，我们可以通过<strong>“数组名[索引]”</strong>的形式来获取数组中的元素。</p><p>这里的<strong>访问</strong>就是获取得到的意思</p><h3 id="4-1数组的长度"><a href="#4-1数组的长度" class="headerlink" title="4.1数组的长度"></a>4.1数组的长度</h3><p>使用<strong>“数组名.length”</strong>可以访问数组元素的数量（数组长度)。</p><h2 id="5-数组中新增元素"><a href="#5-数组中新增元素" class="headerlink" title="5.数组中新增元素"></a>5.数组中新增元素</h2><p>可以通过修改length长度以及索引号增加数组元素</p><h3 id="5-1通过修改length长度新增数组元素"><a href="#5-1通过修改length长度新增数组元素" class="headerlink" title="5.1通过修改length长度新增数组元素"></a>5.1通过修改length长度新增数组元素</h3><ul><li>可以通过修改length长度来实现数组扩容的目的</li><li>length属性是<strong>可读写</strong>的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [  <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green &#x27;</span> , <span class="hljs-string">&#x27; blue &#x27;</span> , <span class="hljs-string">&#x27;pink &#x27;</span> ];arr. length = <span class="hljs-number">7</span>;<span class="hljs-built_in">console</span>.log (arr) ;<span class="hljs-built_in">console</span>.log (arr[<span class="hljs-number">4</span>]);<span class="hljs-built_in">console</span>.log (arr[<span class="hljs-number">5</span>] );<span class="hljs-built_in">console</span>.log (arr[<span class="hljs-number">6</span>]);<br></code></pre></td></tr></table></figure><p>其中索引号是4，5，6的空间没有给值，就是声明变量未给值，<strong>默认值就是undefined。</strong></p><h3 id="5-2通过修改数组索引新增数组元素"><a href="#5-2通过修改数组索引新增数组元素" class="headerlink" title="5.2通过修改数组索引新增数组元素"></a>5.2通过修改数组索引新增数组元素</h3><ul><li><p>可以通过修改数组索引的方式追加数组元素</p></li><li><p>不能直接给数组名赋值，否则会覆盖掉以前的数据</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [ <span class="hljs-string">&#x27; red&#x27;</span> , <span class="hljs-string">&#x27;green &#x27;</span> , <span class="hljs-string">&#x27;blue &#x27;</span> , <span class="hljs-string">&#x27;pink &#x27;</span> ];arr[<span class="hljs-number">4</span>] = <span class="hljs-string">&#x27; hotpink &#x27;</span>;<span class="hljs-built_in">console</span>.log(arr) ;<br></code></pre></td></tr></table></figure><p>这种方式也是我们<strong>最常用的</strong>一种方式。</p><h2 id="1-函数的概念"><a href="#1-函数的概念" class="headerlink" title="1.函数的概念"></a>1.函数的概念</h2><p>在JS里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。</p><p>虽然for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用<strong>JS中的函数。</strong></p><p><strong>函数∶</strong>就是封装了一段<strong>可被重复调用执行的代码块。</strong>通过此代码块可以实现大量代码的重复使用。</p><h2 id="2-函数的使用"><a href="#2-函数的使用" class="headerlink" title="2.函数的使用"></a>2.函数的使用</h2><p>函数在使用时分为两步:<strong>声明函数</strong>和<strong>调用函数</strong>。</p><h3 id="2-1-声明函数"><a href="#2-1-声明函数" class="headerlink" title="2.1 声明函数"></a>2.1 声明函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//函数体代码&#125;</span><br></code></pre></td></tr></table></figure><ul><li><strong>function</strong>是声明函数的关键字,<strong>必须小写</strong></li><li>由于函数一般是为了实现某个功能才定义的，所以通常我们将<strong>函数名</strong>命名为<strong>动词</strong>，比如getSum</li></ul><h3 id="2-2调用函数"><a href="#2-2调用函数" class="headerlink" title="2.2调用函数"></a>2.2调用函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//调用函数函数名(); //通过调用函数名来执行函数体代码</span><br></code></pre></td></tr></table></figure><ul><li>调用的时候千万<strong>不要忘记添加小括号</strong></li><li>口诀:函数不调用，自己不执行。</li></ul><p><strong>注意:声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</strong></p><h3 id="2-3函数的封装"><a href="#2-3函数的封装" class="headerlink" title="2.3函数的封装"></a>2.3函数的封装</h3><ul><li>函数的封装是把一个或者多个功能通过<strong>函数的方式封装起来</strong>，对外只提供一个简单的函数接口</li><li>简单理解︰封装类似于将电脑配件整合组装到机箱中(类似快递打包)</li></ul><h3 id="3-1形参和实参"><a href="#3-1形参和实参" class="headerlink" title="3.1形参和实参"></a>3.1形参和实参</h3><p>在<strong>声明函数时</strong>，可以在函数名称后面的小括号中添加一些参数，这些参数被称为<strong>形参</strong>，而在<strong>调用该函数时</strong>，同样也需要传递相应的参数，这些参数被称为<strong>实参。</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>形参</td><td>形式上的参数函数定义的时候传递的参数当前并不知道是什么</td></tr><tr><td>实参</td><td>实际上的参数函数调用的时候传递的参数实参是传递给形参的</td></tr></tbody></table><p><strong>参数的作用</strong>:在<strong>函数内部</strong>某些值不能固定，我们可以通过参数在<strong>调用函数时传递</strong>不同的值进去。</p><h2 id="3-3函数形参和实参个数不匹配问题"><a href="#3-3函数形参和实参个数不匹配问题" class="headerlink" title="3.3函数形参和实参个数不匹配问题"></a>3.3函数形参和实参个数不匹配问题</h2><table><thead><tr><th>参数个数</th><th>说明</th></tr></thead><tbody><tr><td>实参个等于形参个数</td><td>输出正确结果</td></tr><tr><td>实参个数多于形参个数</td><td>只取到形参的个数</td></tr><tr><td>实参个数小于形参个数</td><td>多的形参定义为undefined</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">num1,num2</span>) </span>&#123;<span class="hljs-built_in">console</span>.log (num1 + num2) ;&#125;sum ( <span class="hljs-number">100</span>,<span class="hljs-number">200</span>);<span class="hljs-comment">//形参和实参个数相等，输出正确结果sum ( 100,400,500，700); //实参个数多于形参，只取到形参的个数sum (200);//实参个数少于形参，多的形参定义为undefined，结果为NaN</span><br></code></pre></td></tr></table></figure><p><strong>注意:在JavaScript中，形参的默认值是undefined</strong></p><h2 id="5-arguments的使用"><a href="#5-arguments的使用" class="headerlink" title="5.arguments的使用"></a>5.arguments的使用</h2><p>当我们不确定有多少个参数传递的时候，可以用 <strong>arguments</strong> 来获取。在JavaScript中,arguments实际上它是当前函数的一个<strong>内置对象</strong>。所有函数都内置了一个arguments对象，arguments对象中<strong>存储了传递的所有实参。</strong></p><p>当我们不确定有多少个参数传递的时候，可以用<strong>arguments</strong>来获取。在JavaScript中，arguments实际上它是当前函数的一个<strong>内置对象</strong>。所有函数都内置了一个arguments对象，arguments对象中<strong>存储了传递的所有实参。</strong></p><p><strong>arguments展示形式是一个伪数组</strong>，因此可以进行遍历。伪数组具有以下特点：</p><ul><li>具有length属性</li><li>按索引方式储存数据</li><li>不具有数组的push , pop等方法</li></ul><h2 id="JS-函数的两种声明方式"><a href="#JS-函数的两种声明方式" class="headerlink" title="JS 函数的两种声明方式"></a>JS 函数的两种声明方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 命名函数function fn () &#123;    ...&#125;// 2. 匿名函数var fn2 = function () &#123;    ...&#125;; //注意这里的 引号，因为是变量赋初值，所以需要 引号</span><br></code></pre></td></tr></table></figure><h2 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1.作用域"></a>1.作用域</h2><h3 id="1-1作用域概述"><a href="#1-1作用域概述" class="headerlink" title="1.1作用域概述"></a>1.1作用域概述</h3><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的<strong>可用性的代码范围</strong>就是这个名字的<strong>作用域</strong>。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><h2 id="2-变量的作用域"><a href="#2-变量的作用域" class="headerlink" title="2.变量的作用域"></a>2.变量的作用域</h2><h3 id="2-1变量作用域的分类"><a href="#2-1变量作用域的分类" class="headerlink" title="2.1变量作用域的分类"></a>2.1变量作用域的分类</h3><p>在JavaScript中，根据作用域的不同，变量可以分为两种:</p><ul><li>全局变量</li><li>局部变量</li></ul><h3 id="2-2全局变量"><a href="#2-2全局变量" class="headerlink" title="2.2全局变量"></a>2.2全局变量</h3><p>在全局作用域下声明的变量叫做**全局变量(在函数外部定义的变量)**。</p><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下var声明的变量是全局变量</li><li><strong>特殊情况</strong>下，在函数内不使用var声明的变量也是全局变量(不建议使用)</li></ul><h3 id="2-2局部变量"><a href="#2-2局部变量" class="headerlink" title="2.2局部变量"></a>2.2局部变量</h3><p>在局部作用域下声明的变量叫做<strong>局部变量(在函数内部定义的变量)</strong></p><ul><li>局部变量只能在该函数<strong>内部</strong>使用</li><li>在函数内部var声明的变量是局部变量</li><li>函数的<strong>形参</strong>实际上就是局部变量</li></ul><h2 id="2-3全局变量和局部变量的区别"><a href="#2-3全局变量和局部变量的区别" class="headerlink" title="2.3全局变量和局部变量的区别"></a>2.3全局变量和局部变量的区别</h2><ul><li>全局变量︰在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量∶只在函数内部使用，当其所在的代码块被执行时，会被初始化;当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h2 id="1-对象"><a href="#1-对象" class="headerlink" title="1.对象"></a>1.对象</h2><h3 id="1-1什么是对象"><a href="#1-1什么是对象" class="headerlink" title="1.1什么是对象?"></a>1.1什么是对象?</h3><p>现实生活中∶万物皆对象，对象是<strong>一个具体的事物</strong>，看得见摸得着的实物。例如，一本书、一辆汽车、一个人可以是“对象”，一个数据库、一张网页、一个与远程服务器的连接也可以是“对象”。</p><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><p>对象是由<strong>属性</strong>和<strong>方法</strong>组成的。</p><ul><li>属性︰事物的<strong>特征</strong>，在对象中用<strong>属性</strong>来表示(常用名词)</li><li>方法∶事物的<strong>行为</strong>，在对象中用<strong>方法</strong>来表示(常用动词)</li></ul><h3 id="1-2为什么需要对象"><a href="#1-2为什么需要对象" class="headerlink" title="1.2为什么需要对象"></a>1.2为什么需要对象</h3><p>JS中的对象表达结构更清晰，更强大。张三疯的个人信息在对象中的表达结构如下∶</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//张三疯.姓名=&#x27;张三疯&#x27;;person.name = &#x27;张三疯&#x27;;//张三疯.性别=&#x27;男&#x27;;person.sex = &#x27;男&#x27;;//张三疯.年龄=128;person.age = 128;//张三疯.身高= 154 ;person.height = 154 ;</span><br></code></pre></td></tr></table></figure><h2 id="2-创建对象的三种方式"><a href="#2-创建对象的三种方式" class="headerlink" title="2.创建对象的三种方式"></a>2.创建对象的三种方式</h2><p>在JavaScript中，现阶段我们可以采用三种方式创建对象( object ) :</p><ul><li>利用<strong>字面量</strong>创建对象</li><li>利用<strong>new Object</strong>创建对象</li><li>利用<strong>构造函数</strong>创建对象</li></ul><h3 id="2-1利用字面量创建对象"><a href="#2-1利用字面量创建对象" class="headerlink" title="2.1利用字面量创建对象"></a>2.1利用字面量创建对象</h3><p><strong>对象字面量</strong>︰就是花括号{}里面包含了表达这个具体事物（对象）的属性和方法。</p><p>{ } 里面采取<strong>键值对</strong>的形式表示</p><ul><li>键 : 相当于属性名</li><li>值 : 相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> star = &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;pink &#x27;</span>,<span class="hljs-attr">age</span> : <span class="hljs-number">18</span>,<span class="hljs-attr">sex</span> :男·，sayHi : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"> </span>) </span>&#123;alert(<span class="hljs-string">&#x27;大家好啊~&quot;) ;&#125;&#125;;</span><br></code></pre></td></tr></table></figure><h3 id="对象的调用"><a href="#对象的调用" class="headerlink" title="对象的调用"></a>对象的调用</h3><ul><li>对象里面的属性调用 : <strong>对象.属性名</strong>，这个小点.就理解为“<strong>的</strong>”<br>对象里面属性的另一种调用方式:<strong>对象[ ‘属性名’]<strong>，注意方括号里面的属性</strong>必须加引号</strong>，我们后面会用<br>对象里面的方法调用∶<strong>对象.方法名0</strong>，注意这个方法钵字后面<strong>一定加括号</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log (star. name);<span class="hljs-comment">//调用名字属性console.log (star[ &#x27;name&#x27;]); //调用名字属性star.sayHi( );//调用sayHi方法,注意，一定不要忘记带后面的括号</span><br></code></pre></td></tr></table></figure><h3 id="2-2-利用-new-Object-创建对象"><a href="#2-2-利用-new-Object-创建对象" class="headerlink" title="2.2 利用 new Object 创建对象"></a>2.2 利用 new Object 创建对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 利用 new Object 创建对象var obj = new Object(); //创建了一个空的对象obj.uname = &#x27;张三疯&#x27;;obj.age = 18;obj.sex = &#x27;男&#x27;;obj.sayHi = function () &#123;console.log(&#x27;hi~~!&#x27;);&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-3利用构造函数创建对象"><a href="#2-3利用构造函数创建对象" class="headerlink" title="2.3利用构造函数创建对象"></a>2.3利用构造函数创建对象</h3><p>构造函数︰是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与new运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age, sex</span>) </span>&#123; <span class="hljs-comment">// 函数名首字母需大写            this.uname = uname;            this.age = age;            this.sex = sex;            this.sing = function (sang) &#123;                console.log(sang);            &#125;        &#125;        var ldh = new Star(&#x27;刘德华&#x27;, 18, &#x27;男&#x27;); // 调用构造函数必须使用 new        console.log(ldh.uname);        console.log(ldh[&#x27;age&#x27;]);        ldh.sing(&#x27;冰雨&#x27;);        var zxy = new Star(&#x27;张学友&#x27;, 19, &#x27;男&#x27;);        console.log(zxy.uname);        console.log(zxy[&#x27;age&#x27;]);        zxy.sing(&#x27;李香兰&#x27;);</span><br></code></pre></td></tr></table></figure><h3 id="2-4构造函数和对象"><a href="#2-4构造函数和对象" class="headerlink" title="2.4构造函数和对象"></a>2.4构造函数和对象</h3><ul><li>构造函数，如Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类( class )</li><li>创建对象，如new Stars()，特指某一个，通过new关键字创建对象的过程我们也称为对象实例化</li></ul><h2 id="3-new关键字"><a href="#3-new关键字" class="headerlink" title="3.new关键字"></a>3.new关键字</h2><h3 id="new在执行时会做四件事情"><a href="#new在执行时会做四件事情" class="headerlink" title="new在执行时会做四件事情:"></a>new在执行时会做四件事情:</h3><ol><li>在内存中创建一个新的空对象。</li><li>让 this指向这个新的对象。</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法。</li><li>返回这个新对象 (所以构造函数里面不需要return )。</li></ol><h3 id="变量、属性、函数、方法总结"><a href="#变量、属性、函数、方法总结" class="headerlink" title="变量、属性、函数、方法总结"></a>变量、属性、函数、方法总结</h3><ul><li>变量:单独声明赋值，单独存在</li><li>属性:对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li><li>函数︰单独存在的，通过“函数名()”的方式就可以调用</li><li>方法∶对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。</li></ul><h2 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1.内置对象"></a>1.内置对象</h2><ul><li>JavaScript中的对象分为3种∶自定义对象、内置对象、浏览器对象</li><li>前面两种对象是JS基础内容，属于 ECMAScript; 第三个浏览器对象属于我们JS独有的，我们JS API讲解</li><li><strong>内置对象</strong> 就是指JS语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能(属性和方法)</li><li>内置对象最大的优点就是帮助我们快速开发</li><li>JavaScript提供了多个内置对象:Math、Date . Array、string等</li></ul><h3 id="2-查文档"><a href="#2-查文档" class="headerlink" title="2.查文档"></a>2.查文档</h3><h3 id="2-2如何学习对象中的方法"><a href="#2-2如何学习对象中的方法" class="headerlink" title="2.2如何学习对象中的方法"></a>2.2如何学习对象中的方法</h3><ol><li>查阅该方法的功能</li><li>查看里面参数的意义和类型</li><li>查看返回值的意义和类型</li><li>通过demo进行测试</li></ol><h2 id="4-日期对象"><a href="#4-日期对象" class="headerlink" title="4.日期对象"></a>4.日期对象</h2><h3 id="4-1-Date概述"><a href="#4-1-Date概述" class="headerlink" title="4.1 Date概述"></a>4.1 Date概述</h3><ul><li>Date对象和Math对象不一样，他是一个构造函数，所以我们需要实例化后才能使用</li><li>Date 实例用来处理日期和时间</li></ul><h3 id="4-2-Date-方法的使用"><a href="#4-2-Date-方法的使用" class="headerlink" title="4.2 Date()方法的使用"></a>4.2 Date()方法的使用</h3><p>1.获取当前时间必须实例化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span> ();<span class="hljs-built_in">console</span>.log (now);<br></code></pre></td></tr></table></figure><p>2.Date()构造函数的参数</p><p>如果括号里面有时间，就返回参数里面的时间。例旧期格式字符串为‘2019-5-1’，可以写成new Date(2019-5-1)或者new Date(2019/5/1)</p><h3 id="4-3日期格式化"><a href="#4-3日期格式化" class="headerlink" title="4.3日期格式化"></a>4.3日期格式化</h3><p>我们想要2019-8-8 8:8:8格式的日期，要怎么办?</p><p>需要获取日期指定的部分，所以我们要手动的得到这种格式。</p><table><thead><tr><th>方法名</th><th>说明</th><th>代码</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当年</td><td>dObj.getFullYear()</td></tr><tr><td>getMonth()</td><td>获取当月(0-11)</td><td>dObj.getMonth()</td></tr><tr><td>getDate()</td><td>获取当天日期</td><td>dobj.getDate()</td></tr><tr><td>getDay)</td><td>获取星期几(周日0到周六6)</td><td>dObj.getDay)</td></tr><tr><td>getHours()</td><td>获取当前小时</td><td>dobj.getHours()</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td><td>dObj.getMinutes()</td></tr><tr><td>getSeconds()</td><td>获取当前秒钟</td><td>dObj.getSeconds()</td></tr></tbody></table><ol><li>核心算法∶输入的时间减去现在的时间就是剩余的时间，即倒计时，但是不能拿着时分秒相减，比如05分减去25分，结果会是负数的。</li><li>用时间戳来做。用户输入时间总的毫秒数减去现在时间的总的毫秒数，得到的就是剩余时间的毫秒数。</li><li>把剩余时间总的毫秒数转换为天、时、分、秒（时间戳转换为时分秒)</li></ol><p>转换公式如下:</p><ul><li>d = parselnt(总秒数/60/60/24);//计算天数 </li><li>h = parselnt(总秒数/60/60%24)//计算小时</li><li>m = parselnt(总秒数/60 %60);//计算分数</li><li>s = parselnt(总秒数%60);//计算当前秒数</li></ul><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h2><h3 id="5-6数组转换为字符串"><a href="#5-6数组转换为字符串" class="headerlink" title="5.6数组转换为字符串"></a>5.6数组转换为字符串</h3><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>toString()</td><td>把数组转换成字符串，逗号分隔每一项</td><td>返回一个字符串</td></tr><tr><td>join(“‘分隔符)</td><td>方法用于把数组中的所有元素转换为一个字符串。</td><td>返回一个字符串</td></tr><tr><td>concat()</td><td>连接两个或多个数组不影响原数组</td><td>返回一个新的数组</td></tr><tr><td>slice()</td><td>数组截取slice(begin, end)  begin&lt;= x &lt; end</td><td>返回被截取项目的新数组</td></tr><tr><td>splice()</td><td>数组删除splice(第几个开始,要删除个数,插入的元素)</td><td>返回被删除项目的新数组注意，这个会影响原数组</td></tr></tbody></table><h2 id="6-字符串对象"><a href="#6-字符串对象" class="headerlink" title="6.字符串对象"></a>6.字符串对象</h2><h3 id="6-1基本包装类型"><a href="#6-1基本包装类型" class="headerlink" title="6.1基本包装类型"></a>6.1基本包装类型</h3><p>为了方便操作基本数据类型，JavaScript还提供了三个特殊的引用类型:String、Number和Boolean。</p><p><strong>基本包装类型</strong>就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//下面代码有什么问题?var str = &#x27;andy&#x27; ;console.log (str.length) ;</span><br></code></pre></td></tr></table></figure><p>按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为js 会把基本数据类型包装为复杂数据类型，其执行过程如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.生成临时变量，把简单类型包装为复杂数据类型var temp = new string ( &#x27;andy&#x27; ) ;//2.赋值给我们声明的字符变量str = temp;//3.销毁临时变量temp = null;</span><br></code></pre></td></tr></table></figure><h3 id="6-2字符串的不可变"><a href="#6-2字符串的不可变" class="headerlink" title="6.2字符串的不可变"></a>6.2字符串的不可变</h3><p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abc &#x27;</span>;str = <span class="hljs-string">&#x27;hello &#x27;</span>;<span class="hljs-comment">//当重新给str赋值的时候，常量&#x27;abc&#x27;不会被修改，依然在内存中//重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变//由于字符串的不可变，在大量拼接字符串的时候会有效率问题var str = &#x27;&#x27;;for (var i = 0; i &lt; 100000; i++) &#123;str t= i;&#125;console.log (str); //这个结果需要花费大量时间来显示，因为需要不断的开辟新的空间</span><br></code></pre></td></tr></table></figure><h3 id="6-4根据位置返回字符（重点"><a href="#6-4根据位置返回字符（重点" class="headerlink" title="6.4根据位置返回字符（重点)"></a>6.4根据位置返回字符（重点)</h3><table><thead><tr><th>方法名</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td>charAt(index)</td><td>返回指定位置的字符(index字符串的索引号)</td><td>str.charAt(0)</td></tr><tr><td>charCodeAt(index)</td><td>获取指定位置处字符的ASCII码(index索引号)</td><td>str.charCodeAt(0)</td></tr><tr><td>str[index]</td><td>获取指定位置处字符</td><td>HTML5，IE8+支持和charAt()等效</td></tr></tbody></table><h3 id="6-5字符串操作方法-重点"><a href="#6-5字符串操作方法-重点" class="headerlink" title="6.5字符串操作方法(重点)"></a>6.5字符串操作方法(重点)</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>concat(str1,str2,str3…)</td><td>concat()方法用于连接两个或多个字符串。拼接字符串，等效于+，+更常用</td></tr><tr><td>substr(start,length)</td><td>从start位置开始(索引号) , length 取的个数重点记住这个</td></tr><tr><td>slice(start, end)</td><td>从start位置开始，截取到end位置，end取不到(他们俩都是索引号)</td></tr><tr><td>substring(start, end)</td><td>从start位置开始，截取到end位置，end取不到基本和slice相同但是不接受负值</td></tr></tbody></table><h2 id="1-简单类型与复杂类型"><a href="#1-简单类型与复杂类型" class="headerlink" title="1.简单类型与复杂类型"></a>1.简单类型与复杂类型</h2><p>简单类型又叫做基本数据类型或者<strong>值类型</strong>，复杂类型又叫做<strong>引用类型。</strong></p><ul><li>值类型︰简单数据类型/基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型string , number , boolean , undefined , null</li><li>引用类型∶复杂数据类型，在存储时变量中存储的仅仅是地址(引用），因此叫做引用数据类型通过 new 关键字创建的对象（系统对象、自定义对象），如Object、Array、Date等</li></ul><h2 id="2-堆和栈"><a href="#2-堆和栈" class="headerlink" title="2.堆和栈"></a>2.堆和栈</h2><p>堆栈空间分配区别∶</p><ol><li>栈(操作系统）∶由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈;<br><strong>简单数据类型存放到栈里面</strong></li><li>堆(操作系统）︰存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。<strong>复杂数据类型存放到堆里面</strong></li></ol><p><strong>注意:JavaScript中没有堆栈的概念，通过堆栈的方式，可以让大家更容易理解代码的一些执行万式，便于将来学习具他语言</strong></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初学HTML</title>
    <link href="/2021/09/28/%E5%88%9D%E5%AD%A6HTML/"/>
    <url>/2021/09/28/%E5%88%9D%E5%AD%A6HTML/</url>
    
    <content type="html"><![CDATA[<h1 id="初学HTML"><a href="#初学HTML" class="headerlink" title="初学HTML"></a>初学HTML</h1><h2 id="大千世界，奥妙无穷，我们穷一生仍不能学习其皮毛。✨"><a href="#大千世界，奥妙无穷，我们穷一生仍不能学习其皮毛。✨" class="headerlink" title="大千世界，奥妙无穷，我们穷一生仍不能学习其皮毛。✨"></a>大千世界，奥妙无穷，我们穷一生仍不能学习其皮毛。✨</h2><h2 id="1-1-网页与网站"><a href="#1-1-网页与网站" class="headerlink" title="1.1 网页与网站"></a>1.1 网页与网站</h2><p>网站是使用HTML制作的网页的集合</p><p>网页是网站的一’页‘，通常是HTML格式的文件，它要通过浏览器来阅读。</p><p>网页是网站的基本元素，而网页通常由图片，文字，剩余，视频等<strong>元素</strong>组成。</p><h2 id="3-1-为什么需要web标准"><a href="#3-1-为什么需要web标准" class="headerlink" title="3.1 为什么需要web标准"></a>3.1 为什么需要web标准</h2><p>浏览器不同，它们显示页面或者排版就会有些许差异。</p><h2 id="3-2-web标准的构成⭐⭐⭐"><a href="#3-2-web标准的构成⭐⭐⭐" class="headerlink" title="3.2 web标准的构成⭐⭐⭐"></a>3.2 web标准的构成⭐⭐⭐</h2><p>web标准主要包括结构(Structure)、表现(Presentation)、行为(Behavior)三个方面。</p><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>结构用于<strong>网页元素</strong>进行整理和分类， 现阶段主要学的是HTML。</td></tr><tr><td>表现</td><td>表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，主要指的是CSS。</td></tr><tr><td>行为</td><td>行为是指网页模型的定义及<strong>交互</strong>的编写，现阶段主要学的是Javascript。</td></tr></tbody></table><h2 id="1-HTML语法规范"><a href="#1-HTML语法规范" class="headerlink" title="1. HTML语法规范"></a>1. HTML语法规范</h2><h2 id="1-1-基本语法概述"><a href="#1-1-基本语法概述" class="headerlink" title="1.1 基本语法概述"></a>1.1 基本语法概述</h2><p>1.HTML标签是由<strong>尖括号包围的关键词</strong>，例如<kbd><html></kbd></p><p>2.HTML标签<strong>通常是成对出现的</strong>，例如<kbd><html></kbd>，<kbd></html></kbd>，我们称为<strong>双标签</strong>。标签对的第一个标签是开始标签，第二个标签是结束标签。</p><p>3.有些特殊的标签必须是单个标签（极少情况），例如<code>&lt;br /&gt;</code>,我们称之为<strong>单标签</strong></p><h2 id="1-2-标签关系"><a href="#1-2-标签关系" class="headerlink" title="1.2 标签关系"></a>1.2 标签关系</h2><p>双标签关系可以分为两类：<strong>包含关系</strong>和<strong>并列关系</strong>。</p><h2 id="2-HTML基本结构标签"><a href="#2-HTML基本结构标签" class="headerlink" title="2.HTML基本结构标签"></a>2.HTML基本结构标签</h2><h2 id="2-1-第一个HTML"><a href="#2-1-第一个HTML" class="headerlink" title="2.1 第一个HTML"></a>2.1 第一个HTML</h2><p>每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写。</p><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;hrml&gt;&lt;/html&gt;</code></td><td>HTML标签</td><td>页面中最大的标签，我们称之为<strong>根标签</strong></td></tr><tr><td><code>&lt;head&gt;&lt;/head&gt;</code></td><td>文档的头部</td><td>注意在head标签中我们必须要设置的标签是title</td></tr><tr><td><code>&lt;title&gt;&lt;/title&gt;</code></td><td>文档的标签</td><td>让页面拥有一个属于自己的网页标题</td></tr><tr><td><code>&lt;body&gt;&lt;/body&gt;</code></td><td>文档的主体</td><td>元素包含文档的所有内容，页面内容基本都是放到body里面的</td></tr></tbody></table><p><font color=#FF0000><strong>HTML文档的后缀名必须是.html或.htm</strong>。</font></p><h2 id="VSCode的使用"><a href="#VSCode的使用" class="headerlink" title="VSCode的使用"></a>VSCode的使用</h2><p>1.双击打开软件</p><p>2.新建文件（Ctrl+N）</p><p>3.保存（Ctrl+S），注意一定要保存为<kbd>.html</kbd>的文件</p><p>4.Ctrl+加号键、减号键可以放大缩小视图</p><p>5.生成页面骨架结构，输入<kbd>!</kbd>按下TAB键</p><p>6.利用插件在浏览器中预览页面：右键选中“Open In Default Browser”</p><h2 id="3-网页开发工具"><a href="#3-网页开发工具" class="headerlink" title="3. 网页开发工具"></a>3. 网页开发工具</h2><h2 id="3-1-文档类型声明标签"><a href="#3-1-文档类型声明标签" class="headerlink" title="3.1 文档类型声明标签"></a>3.1 文档类型声明标签</h2><p><kbd><!DOCTYPE></kbd> 即（Document，Type）文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页。</p><ol><li><p><code>&lt;!DOCTYPE&gt;</code>声明位于文档中的最前面的位置，处于<html>标签之前。</p></li><li><p><code>&lt;!DOCTYPE&gt;</code>不是一个HTML标签，它就是文档类型声明标签。</p></li></ol><h2 id="3-2-lang-语言种类"><a href="#3-2-lang-语言种类" class="headerlink" title="3.2 lang 语言种类"></a>3.2 lang 语言种类</h2><p>用来定义当前文档显示的语言。</p><ol><li>en定义语言为英语</li><li>zh-CN定义语言为中文</li></ol><p>简单来说，定义为en就是英文网页，定义为zh-CN就是中文网页。</p><h2 id="3-3-字符集"><a href="#3-3-字符集" class="headerlink" title="3.3 字符集"></a>3.3 字符集</h2><p>字符集（Character set）是多个字符的几个。以便计算机能够识别和存储各种文字，</p><p>在<code>&lt;head&gt;</code>标签内，可以通过<code>&lt;meta&gt;</code>标签的charset属性来规定HTML文档应该使用哪种字符编码。</p><p><kbd><meta charset="UTF-8"/></kbd></p><p>charset常用的值有：GB2312、BLG5、GBK和UTF-8，其中<strong>UTF-8</strong>也被称为<strong>万国码</strong>，基本包含了全世界所有国家需要用到的字符。 </p><p><font color=#FF0000><strong>注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的“UTF-8”，不要写成“ut8”或“UTF8”。</strong></font></p><h2 id="4-HTML-常用标签"><a href="#4-HTML-常用标签" class="headerlink" title="4. HTML 常用标签"></a>4. HTML 常用标签</h2><p>学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指<strong>标签的含义</strong>，即这个标签是用来干嘛的。</p><p><strong>根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</strong></p><h2 id="4-2-标题标签-lt-h1-gt-lt-h6-gt-⭐⭐⭐"><a href="#4-2-标题标签-lt-h1-gt-lt-h6-gt-⭐⭐⭐" class="headerlink" title="4.2 标题标签 &lt;h1&gt;-&lt;h6&gt;⭐⭐⭐"></a>4.2 标题标签 <code>&lt;h1&gt;-&lt;h6&gt;</code>⭐⭐⭐</h2><h2 id="4-4-文本格式化标签"><a href="#4-4-文本格式化标签" class="headerlink" title="4.4 文本格式化标签"></a>4.4 文本格式化标签</h2><p>在网页中，有时需要为文字设置<strong>粗体</strong>、<em>斜体</em>、<ins>下划线</ins>、<del>删除线</del>等效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p>标签语义：突出重要性，比普通文字更重要。</p><table><thead><tr><th>语义</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></td><td>更推荐使用<code>&lt;strong&gt;</code>标签加粗，语义更强烈</td></tr><tr><td>倾斜</td><td><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></td><td>更推荐使用<code>&lt;em&gt;</code>标签倾斜，语义更强烈</td></tr><tr><td>删除线</td><td><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></td><td>更推荐使用<code>&lt;del&gt;</code>标签删除线，语义更强烈</td></tr><tr><td>下划线</td><td><code>&lt;ins&gt;&lt;/ins&gt;</code>或者 <code>&lt;u&gt;&lt;/u&gt;</code></td><td>更推荐使用<code>&lt;ins&gt;</code>标签下划线，语义更强烈</td></tr></tbody></table><p><font color=#FF0000><strong>⭐重点记住左边一排即可！⭐</strong></font></p><h2 id="4-5-lt-dir-gt-和-lt-spen-gt-标签"><a href="#4-5-lt-dir-gt-和-lt-spen-gt-标签" class="headerlink" title="4.5 &lt;dir&gt;和&lt;spen&gt;标签"></a>4.5 <code>&lt;dir&gt;</code>和<code>&lt;spen&gt;</code>标签</h2><p><code>&lt;dir&gt;</code>和<code>&lt;spen&gt;</code>是没有语义的，它们就是一个盒子，用来装内容的。</p><p>div是division的缩写，表示分割、分区。span意为跨度、跨距。</p><p><strong>特点</strong>：</p><ol><li><code>&lt;div&gt;</code>标签用来布局，但是现在一行只能放一个<code>&lt;div&gt;</code>。大盒子</li><li><code>&lt;span&gt;</code>标签用来布局，一行上可以多个<code>&lt;span&gt;</code>。小盒子</li></ol><h2 id="4-6图像标签⭐⭐⭐"><a href="#4-6图像标签⭐⭐⭐" class="headerlink" title="4.6图像标签⭐⭐⭐"></a>4.6图像标签⭐⭐⭐</h2><p>在HTML标签中， <code>&lt;img&gt;</code>标签用于定义HTML页面中的图像。单词image的缩写，意为图像。</p><blockquote><p><code>&lt;img src=&quot;图像URL&quot; /&gt;</code></p></blockquote><p>⭐<font color=#FF0000><strong>src</strong></font>是<code>&lt;img&gt;</code>标签的<font color=#FF0000><strong>必须属性</strong></font>，它用于<font color=#FF0000><strong>指定图像文件的路径和文件名</strong></font>。⭐src是source的缩写，意为来源，源文件</p><h3 id="1-图像标签"><a href="#1-图像标签" class="headerlink" title="1.图像标签"></a>1.图像标签</h3><p>图像标签的其他属性：</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本。图像不能加载时显示的文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本。鼠标放到图像上，显示的文字</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图像的边框粗细</td></tr></tbody></table><p>图像标签属性注意点：</p><ul><li>图像标签可以拥有多个属性，必须卸载标签名的后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>属性采取键值对的格式，即key=“value”的格式，属性=“属性值”。</li></ul><h2 id="4-7-超链接标签⭐⭐⭐"><a href="#4-7-超链接标签⭐⭐⭐" class="headerlink" title="4.7 超链接标签⭐⭐⭐"></a>4.7 超链接标签⭐⭐⭐</h2><p>在HTML标签中，<code>&lt;a&gt;</code>标签用于定义超链接，作用是从一个页面链接到另一个页面。a是anchor的缩写，意为”锚“。</p><p><strong>1. 链接的语法格式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;跳转目标&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span> 文本或图像<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，其中<code>_self</code>为默认值，<code>_blank</code>为在新窗口中打开方式</td></tr></tbody></table><p><strong>2. 链接分类：</strong></p><ol><li>外部链接：例如<code>&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</code></li><li>内部链接：网站内部页面之间的互相链接，直接链接内部页面名称即可，例如<code>&lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt;</code></li><li>空链接：如果当时没有确定链接目标时，<code>&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;</code>。</li><li>下载链接：如果href里面地址是一个文件或者压缩包，会下载这个文件。</li><li>网页元素链接：在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接。</li><li>锚点链接：当点击链接，可以快速定位到页面中的某个位置。<ul><li>在链接文本的href属性中，设置属性值为**#名字**的形式，如<code>&lt;a href=&quot;#two&quot;&gt;第二集&lt;/a&gt;</code></li><li>找到目标位置标签，里面添加一个id属性=刚才设置的名字，如<code>&lt;h3 id=&quot;two&quot;&gt;第二集介绍&lt;/h3&gt;</code></li></ul></li></ol><h2 id="5-HTML中的注释和特殊字符"><a href="#5-HTML中的注释和特殊字符" class="headerlink" title="5. HTML中的注释和特殊字符"></a>5. HTML中的注释和特殊字符</h2><h2 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h2><p>如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p><p>HTML中的注释以<code>&lt;!--</code>开头，以<code>--&gt;</code>结束</p><h2 id="5-2-特殊字符"><a href="#5-2-特殊字符" class="headerlink" title="5.2 特殊字符"></a>5.2 特殊字符</h2><p>在HTML页面中，一些特殊的符号和南宁或者不方便直接使用，此时我们就可以使用下面的字符来代替（注意不要漏掉分号）</p><table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td></td><td>空格符</td><td><code>&amp;nbsp;</code></td></tr><tr><td><code>&lt;</code></td><td>小于号</td><td><code>&amp;lt;</code></td></tr><tr><td><code>&gt;</code></td><td>大于号</td><td><code>&amp;gt;</code></td></tr></tbody></table><p><strong>重点记住：空格、大于号、小于号 这三个</strong>，其余的有需要回头查阅即可。</p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><h2 id="1-表格标签"><a href="#1-表格标签" class="headerlink" title="1.表格标签"></a>1.表格标签</h2><p>1.1 表格不是用来布局页面的，而是用来展示数据的。</p><h2 id="1-2-表格的基本语法"><a href="#1-2-表格的基本语法" class="headerlink" title="1.2 表格的基本语法"></a>1.2 表格的基本语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.<code>&lt;table&gt;&lt;/table&gt;</code>是用于定义表格的标签</p><p>2.<code>&lt;tr&gt;&lt;/tr&gt;</code>标签用于定义表格中的行，必须嵌套在<code>&lt;table&gt;&lt;/table&gt;</code>标签中</p><p>3.<code>&lt;td&gt;&lt;/td&gt;</code>用于定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中</p><p>1.3 表头单元格标签</p><p>一般表头单元格位于表格的第一行或第一列，表头单元格里面的文字内容加粗居中显示</p><p><code>&lt;th&gt;</code>标签表示HTML表格的表头部分（table head）的缩写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.4 表格属性</p><p>表格标签这部分属性我们实际开发不常用，后面通过CSS来设置</p><p>目的有2个：</p><ol><li>记住这些英语单词，后面CSS会使用</li><li>直观感受表格的外观形态</li></ol><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left、center、right</td><td>规定表格相对周围元素的对其方式。</td></tr><tr><td>border</td><td>1或0</td><td>规定表格单元是否拥有边框，默认为“0”，表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认2像素</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格的宽度</td></tr></tbody></table><p>1.5 表格结构标签</p><p>使用场景：因为表可能很长，为了更好的表示表格的语义，可以将表格分割成<strong>表格头部</strong>和<strong>表格主体</strong>两大部分。</p><p>在表格标签中，分别用：<code>&lt;thead&gt;</code>标签 表格头部区域  <code>&lt;tbody&gt;</code>标签 表格主体区域，这样可以更好的分清表格结构。</p><ol><li><code>&lt;thead&gt;</code>：用于定义表格的头部，<code>&lt;thead&gt;</code>内部必须拥有<code>&lt;tr&gt;</code>标签，一般是位于第一位。</li><li><code>&lt;tbody&gt;</code>：用于定义表格的主体，主要用于放数据本体。</li><li>以上标签都是放在<code>&lt;table&gt;</code>标签中。</li></ol><h2 id="1-6-合并单元格"><a href="#1-6-合并单元格" class="headerlink" title="1.6 合并单元格"></a>1.6 合并单元格</h2><p><strong>合并单元格方式：</strong></p><ul><li>跨行合并：rowspan=”合并单元格的个数”</li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><p><strong>目标单元格：（写合并代码）</strong></p><ul><li>跨行：最上测单元格为目标单元格，写合并代码</li><li>跨列：最左侧单元格为目标单元格，写合并代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>星期一<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>星期二<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>星期天<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>合并单元格三部曲：</strong></p><ol><li>先确定跨行还是跨列</li><li>找到目标单元格，写上合并方式=合并的单元格数量。比如：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code></li><li>删除多余的单元格</li></ol><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h2 id="2-1-无序列表"><a href="#2-1-无序列表" class="headerlink" title="2.1 无序列表"></a>2.1 无序列表</h2><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。</p><p>无序列表使用 <code>&lt;ul&gt;</code> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-有序列表"><a href="#2-2-有序列表" class="headerlink" title="2.2 有序列表"></a>2.2 有序列表</h2><p>同样，有序列表也是一列项目，列表项目使用数字进行标记。 有序列表始于 <code>&lt;ol&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code> 标签。</p><p>列表项使用数字来标记。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-3-自定义列表"><a href="#2-3-自定义列表" class="headerlink" title="2.3 自定义列表"></a>2.3 自定义列表</h2><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。</p><p>自定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt; </code>开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- white cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器显示如下：</p><ul><li><p>Coffee</p><ul><li>black hot drink</li></ul></li><li><p>Milk</p><ul><li>white cold drink</li></ul></li></ul><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h2 id="3-1-为什么需要表单"><a href="#3-1-为什么需要表单" class="headerlink" title="3.1 为什么需要表单"></a>3.1 为什么需要表单</h2><p>使用表单目的是为了<strong>收集用户信息</strong>。</p><p>在我们网页中，我们也需要跟用户进行交互，手机用户资料，此时就需要表单。</p><h2 id="3-2-表单的组成"><a href="#3-2-表单的组成" class="headerlink" title="3.2 表单的组成"></a>3.2 表单的组成</h2><p>在HTML中，一个完整的表单通常由<strong>表单域</strong>、<strong>表单控件（也称为表单元素）</strong>和<strong>提示信息</strong>三个部分构成。</p><h2 id="3-3-表单域"><a href="#3-3-表单域" class="headerlink" title="3.3 表单域"></a>3.3 表单域</h2><p><strong>表单域</strong>是一个<strong>包含表单元素的区域</strong>。</p><p>在HTML标签中，**<code>&lt;form&gt;</code>**标签用于定义表单域，以实现用户信息的收集和传递。</p><p><strong><code>&lt;form&gt;</code>会把它范围内的表单元素信息提交给服务器</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br>    各种表单元素控件<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常用属性：</p><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单数据的提交方式，其取值为get或post</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table><h2 id="3-4-表单控件（表单元素）"><a href="#3-4-表单控件（表单元素）" class="headerlink" title="3.4 表单控件（表单元素）"></a>3.4 表单控件（表单元素）</h2><p>在表单域中可以定义各种表单元素，这些表单元素就是允许用于在表单中输入或者选择的内容控件。</p><p><strong>1.input输入表单元素    2.select下拉元素    3.textarea文本域元素</strong></p><h2 id="3-4-1-lt-input-gt-表单元素"><a href="#3-4-1-lt-input-gt-表单元素" class="headerlink" title="3.4.1 &lt;input&gt;表单元素"></a>3.4.1 <code>&lt;input&gt;</code>表单元素</h2><p>在英文单词中，input是输入的意思，而在表单元素中 <strong><code>&lt;input&gt;</code>标签用于收集用户信息</strong>。</p><p>在<code>&lt;input&gt;</code>标签中，包含一个type属性，根据不同的type属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”属性值“</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>type 属性的<strong>属性值</strong>及其描述如下：</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击按钮（大多数情况下，用于通过JavaScript启动脚本）。</td></tr><tr><td>checkbox</td><td>定义复选框。</td></tr><tr><td>file</td><td>定义输入字段和”浏览“按钮，供文件上传。</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段。</td></tr><tr><td>image</td><td>定义图像形式的提交按钮。</td></tr><tr><td>password</td><td>定义密码字段。该字段中的字符被掩码。</td></tr><tr><td>radio</td><td>定义单选按钮。</td></tr><tr><td>reset</td><td>定义重置按钮，重置按钮会清除表单中的所有数据。</td></tr><tr><td>submit</td><td>定义提交按钮。提交按钮会把表单的数据发送到服务器。</td></tr><tr><td>text</td><td>定义单行的输入字段，用户可在其中输入文本。默认宽度为20个字符。</td></tr></tbody></table><p>除了type属性外，<code>&lt;input&gt;</code>标签还有其他很多属性，其常用属性如下：</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>由用户定义</td><td>定义input元素的名称</td></tr><tr><td>value</td><td>由用户定义</td><td>规定input元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定此input元素首次加载时应当被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中的字符的最大长度</td></tr></tbody></table><ol><li>name和value是每个表单元素都有的属性值，主要给后台人员使用</li><li>name表单元素的名字，要求<strong>单选按钮和复选按钮要有相同的name值</strong></li><li><strong>checked 属性主要针对于单选按钮和复选框</strong>，主要作用一打开页面，就默认选中某个表单元素</li><li>maxlength是用户可以在表单元素输入的最大字符数，一般较少使用</li></ol><h2 id="3-4-2-lt-label-gt-标签"><a href="#3-4-2-lt-label-gt-标签" class="headerlink" title="3.4.2 &lt;label&gt;标签"></a>3.4.2 <code>&lt;label&gt;</code>标签</h2><p><code>&lt;label&gt;</code>标签为input元素定义标注（标签）。</p><p><code>&lt;label&gt;</code>标签用于绑定一个表单元素，当点击<code>&lt;label&gt;</code>标签内的文本时，浏览器就会自动将焦点（光标）转到或者选择对应的表单元素上，用来增加用户体验。</p><h2 id="lt-label-gt-配合-lt-input-gt-最佳模版⭐⭐⭐"><a href="#lt-label-gt-配合-lt-input-gt-最佳模版⭐⭐⭐" class="headerlink" title="&lt;label&gt;配合&lt;input&gt;最佳模版⭐⭐⭐"></a><code>&lt;label&gt;</code>配合<code>&lt;input&gt;</code>最佳模版⭐⭐⭐</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sexf&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;radios&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sexf&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;javascript:onSexChange(&#x27;2&#x27;);&quot;</span>  /&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：<code>&lt;label&gt;</code> 的 for 对应 <code>&lt;input&gt;</code> 的 id</strong></p><h2 id="3-4-3-lt-select-gt-标签"><a href="#3-4-3-lt-select-gt-标签" class="headerlink" title="3.4.3 &lt;select&gt;标签"></a>3.4.3 <code>&lt;select&gt;</code>标签</h2><p>在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用<code>&lt;select&gt;</code> 标签控件定义<strong>下拉列表</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>     ...<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code>。</li><li>在<code>&lt;option&gt;</code>中定义<code>selected=&quot;selected&quot;</code>时，当前项即为默认选项。</li></ol><h2 id="3-4-4-lt-textarea-gt-表单元素"><a href="#3-4-4-lt-textarea-gt-表单元素" class="headerlink" title="3.4.4 &lt;textarea&gt;表单元素"></a>3.4.4 <code>&lt;textarea&gt;</code>表单元素</h2><p>使用场景：当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用<code>&lt;textarea&gt;</code>标签。</p><p>在表单元素中，<code>&lt;textarea&gt;</code>标签是用于定义多行文本输入的控件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows-</span>&quot;<span class="hljs-attr">3</span>&quot; <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span> &gt;</span>文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>通过<code>&lt;textarea&gt;</code>标签可以轻松地创建多行文本输入框。</li><li>cols=”每行中的字符数”，rows=”显示的行数”，<strong>我们在实际开发中不会使用，都是用CSS来改变大小</strong>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初学CSS</title>
    <link href="/2021/09/28/%E5%88%9D%E5%AD%A6CSS/"/>
    <url>/2021/09/28/%E5%88%9D%E5%AD%A6CSS/</url>
    
    <content type="html"><![CDATA[<h1 id="初学CSS"><a href="#初学CSS" class="headerlink" title="初学CSS"></a>初学CSS</h1><p>CSS的主要使用场景就是美化网页，布局页面的。</p><ol><li><p>HTML的局限性</p><p>HTML只关注内容的语义。比如<code>&lt;h1&gt;</code>是个大标题、<code>&lt;p&gt;</code>表面这是一个段落、<code>&lt;img&gt;</code>表明这有一个图片、<code>&lt;a&gt;</code>表示此处有链接。</p></li><li><p>CSS-网页美容师</p><p><strong>CSS</strong>是<strong>层叠样式表（cascading style sheet）</strong>的简称，有时我们也会称之为<strong>CSS样式表</strong>或<strong>级联样式表</strong>。</p><p>CSS也是一种标记语言</p><p>CSS主要用于设置HTML页面中的<strong>文本内容</strong>、<strong>图片外形</strong>以及<strong>版面的布局</strong>和<strong>外观显示样式</strong>。</p></li><li><p>CSS最大的价值：即 结构（HTML）与样式（CSS）相分离</p></li></ol><h2 id="1-3-CSS的语法规范"><a href="#1-3-CSS的语法规范" class="headerlink" title="1.3 CSS的语法规范"></a>1.3 CSS的语法规范</h2><p>使用HTML时，需要遵从一定的规范，CSS也是如此。想要熟练地使用CSS对网页进行修饰，首先需要了解CSS的规则。</p><p>CSS规则主要由两部分构成：<strong>选择器以及一条或多条声明</strong>。</p><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\CSS.png" width="500" /><ul><li><strong>选择器</strong>是用于指定CSS标签的<strong>HTML标签</strong>，花括号内是对该对象设置的具体样式</li><li>属性和属性值以<strong>“键值对“</strong>的形式出现</li><li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</li><li>属性和属性值之间用英文<strong>” : “</strong>分开</li><li>多个<strong>”键值对“</strong>之间用英文<strong>” ； “</strong>进行区分</li></ul><h2 id="2-1-CSS选择器的作用"><a href="#2-1-CSS选择器的作用" class="headerlink" title="2.1 CSS选择器的作用"></a>2.1 CSS选择器的作用</h2><p>选择器（选择符）就是根据不同需求把不同的标签选择出来这就是选择器的作用。简单来说，就是<strong>选择标签用的</strong>。</p><h2 id="2-3-标签选择器"><a href="#2-3-标签选择器" class="headerlink" title="2.3 标签选择器"></a>2.3 标签选择器</h2><p><strong>标签选择器（元素选择器）</strong>是指用<strong>HTML标签名称</strong>作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</p><ul><li><p>作用</p><p>标签选择器可以把某一类标签全部选择出来，比如所有的<code>&lt;div&gt;</code>标签和所有的<code>&lt;span&gt;</code>标签。</p></li><li><p>优点</p><p>能快速为页面中同类的标签统一设置样式。</p></li><li><p>缺点</p><p>不能设计差异化样式，只能选择全部的当前标签。</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>: green;&#125;&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="2-4-类选择器"><a href="#2-4-类选择器" class="headerlink" title="2.4 类选择器"></a>2.4 类选择器</h2><p>如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。</p><p>类选择器在HTML中以class属性表示，在CSS中，类选择器以一个点 <strong>“ . ”</strong> 号表示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<span class="hljs-selector-class">.red</span> &#123;    <span class="hljs-attribute">color</span>: red;&#125;&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span> &gt;</span>冰雨<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span> &gt;</span>来生缘<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>李香兰<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>生僻字<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：“ . ” 跟 “class” 需搭配食用</strong></p><ol><li>类选择器使用 <code>&quot; . &quot;</code>进行标识，后面紧跟类名（自定义的）</li><li>可以理解为给这个标签起了一个名字，来表示</li><li>长名称或者词组可以使用中横线来为选择器命名</li><li>不要使用纯数字、中文等命名，尽量使用英文字母来表示</li><li>命名要有意义，尽量使别人一眼就知道这个类名的目的</li><li>命名规范：见附件（web前端开发规范手册.doc）</li></ol><p><strong>记忆口诀</strong>：样式<strong>点</strong>定义、结构<strong>类</strong>调用。一个或多个、开发最常用。</p><h2 id="2-4-1-多类名使用方式"><a href="#2-4-1-多类名使用方式" class="headerlink" title="2.4.1 多类名使用方式"></a>2.4.1 多类名使用方式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.red</span> &#123;    <span class="hljs-attribute">color</span>: red;&#125;<span class="hljs-selector-class">.font35</span> &#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red font35&quot;</span> &gt;</span>王老菊<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>在标签class属性中写多个类名</li><li>多个类名中间必须用空格分开</li></ol><h2 id="2-5-id选择器"><a href="#2-5-id选择器" class="headerlink" title="2.5 id选择器"></a>2.5 id选择器</h2><p>id选择器可以为标有特定id的HTML元素指定特定的样式。</p><p>HTML元素以<strong>id属性</strong>来设置id选择器，CSS中id选择器以<strong>“#”</strong>来定义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">#id名 &#123;属性1: 属性值;...&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id名&quot;</span> &gt;</span>王老菊<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：id属性只能在每个HTML文档中出现一次。</strong></p><p><strong>口诀：样式 # 定义，结构 id 调用，只能调用一次，别人切勿使用。</strong></p><p><strong>id选择器和类选择器的区别</strong></p><ol><li>类选择器（class）可以多次被使用。</li><li>id选择器，只能被使用一次</li><li>id选择器和类选择器最大的不同在于使用次数上。</li><li>类选择器在修改样式中用的最多，id选择器一般用于页面唯一的元素上，经常和JavaScript搭配使用。</li></ol><h2 id="2-6-通配符选择器"><a href="#2-6-通配符选择器" class="headerlink" title="2.6 通配符选择器"></a>2.6 通配符选择器</h2><p>在CSS中，通配符选择器使用 <strong>“ * ”</strong> 定义，它表示选取页面中所有元素（标签）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;* &#123;    属性：属性值;        ...&#125;&lt;/style&gt;<br></code></pre></td></tr></table></figure><ul><li>通配符选择器不需要调用，自动就给所有元素使用样式</li><li>特殊情况才使用，后面讲解使用场景（以下是清除所有的元素标签的内外边距，后期讲）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="3-CSS字体属性"><a href="#3-CSS字体属性" class="headerlink" title="3. CSS字体属性"></a>3. CSS字体属性</h2><p>CSS Fonts（字体）属性用于定义字体系列、大小、粗细和文字样式（如斜体）。</p><h2 id="3-1-字体系列"><a href="#3-1-字体系列" class="headerlink" title="3.1 字体系列"></a>3.1 字体系列</h2><p>CSS 使用 font-family属性定义文本的字体系列。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;微软雅黑&quot;</span>&#125;<span class="hljs-selector-tag">div</span> &#123;    <span class="hljs-attribute">font-family</span>： Arial, &quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;;&#125;<br></code></pre></td></tr></table></figure><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li><li>尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示</li><li>最常见的几个字体：<code>body&#123;font-family: &quot;Microsoft Yahei&quot;, tahoma, arial, &quot;Hiragino Sans GB&quot;; &#125;</code></li></ul><h2 id="3-2-字体大小"><a href="#3-2-字体大小" class="headerlink" title="3.2 字体大小"></a>3.2 字体大小</h2><p>CSS 使用 font-size 属性定义字体大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li>px(像素)大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为16px</li><li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小</li><li>可以给body指定整个页面文字的大小</li></ul><h2 id="3-3-字体粗细"><a href="#3-3-字体粗细" class="headerlink" title="3.3 字体粗细"></a>3.3 字体粗细</h2><p>CSS 使用 font-weight 属性设置文本字体的粗细。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;    <span class="hljs-attribute">font-weight</span>: bold;&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值（不加粗的）</td></tr><tr><td>bold</td><td>定义粗体（加粗的）</td></tr><tr><td>100-900</td><td>400等同于 normal，而 700 等同于 bold，注意这个数字后面不跟单位</td></tr></tbody></table><ul><li>学会让加粗标签（比如h和strong等）不加粗，或者其他标签加粗</li><li><strong>实际开发时，我们更喜欢用数字表示粗细</strong></li></ul><h2 id="3-4-字体样式"><a href="#3-4-字体样式" class="headerlink" title="3.4 字体样式"></a>3.4 字体样式</h2><p>CSS 使用 font-style 属性设置文本的风格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;    <span class="hljs-attribute">font-style</span>: normal;&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值，浏览器会显示标准的字体样式，font-style: normal</td></tr><tr><td>italic</td><td>浏览器会显示斜体的字体样式。</td></tr></tbody></table><p><strong>注意：平时我们很少给文字加斜体，反而要给斜体标签（em，i）改为不斜体字体</strong>。</p><h2 id="3-5-字体的复合属性"><a href="#3-5-字体的复合属性" class="headerlink" title="3.5 字体的复合属性"></a>3.5 字体的复合属性</h2><p>字体属性可以把以上文字样式综合来写，这样可以更节约代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;    <span class="hljs-attribute">font</span>: font-style font-weight font-size/line-height font-family&#125;<br></code></pre></td></tr></table></figure><ul><li>使用 font 属性时，必须按上面语法格式中的顺序书写，<strong>不能更换顺序</strong>，并且各个属性间以<strong>空格</strong>隔开</li><li>不需要设置的属性可以省略（取默认值），但<strong>必须保留 font-size 和 font-family 属性</strong>，否则 font 属性将不起作用。</li></ul><h2 id="3-6-字体属性总结"><a href="#3-6-字体属性总结" class="headerlink" title="3.6 字体属性总结"></a>3.6 字体属性总结</h2><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>font-size</td><td>字号</td><td>我们通常用的单位是px像素，一定要跟上单位</td></tr><tr><td>font-famliy</td><td>字体</td><td>实际工作中按照团队约定来写字体</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>记住加粗是 700 或者 bold 不加粗是 normal 或者 400 记住数字不要跟单位</td></tr><tr><td>font-style</td><td>字体样式</td><td>记住倾斜是 italic 不倾斜是 normal 工作中我们最常用 normal</td></tr><tr><td>font</td><td>字体连写</td><td>1.字体连写是有顺序的 不能随意调换位置 2.其中<strong>字号</strong> 和 <strong>字体</strong> 必须同时出现</td></tr></tbody></table><h2 id="4-CSS文本属性"><a href="#4-CSS文本属性" class="headerlink" title="4. CSS文本属性"></a>4. CSS文本属性</h2><p>CSS Text（文本）属性可定义文本的外观，比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等。</p><h2 id="4-1-文本颜色"><a href="#4-1-文本颜色" class="headerlink" title="4.1 文本颜色"></a>4.1 文本颜色</h2><p>color 属性用于定义文本的颜色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;    <span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>表示方式</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red，green，blue，还有pink老师的御用色 pink</td></tr><tr><td>十六进制</td><td>#FF0000 , #FF6600 , #29D794</td></tr><tr><td>RGB代码</td><td>rgb（225，0，0）或 rgb（100%，0%，0%）</td></tr></tbody></table><p>不需要特别记忆，认识即可，后期经常会用到习惯工具来吸取颜色。</p><h2 id="4-2-对齐文本"><a href="#4-2-对齐文本" class="headerlink" title="4.2 对齐文本"></a>4.2 对齐文本</h2><p>text-aglign 属性用于设置元素内文本内容的水平对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;    <span class="hljs-attribute">text-align</span>: center;&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h2 id="4-3-装饰文本"><a href="#4-3-装饰文本" class="headerlink" title="4.3 装饰文本"></a>4.3 装饰文本</h2><p>text-decoration 属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;    <span class="hljs-attribute">text-decoration</span>: underline;&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。没有装饰线（最常用）</td></tr><tr><td>underline</td><td>下划线。链接 a 自带下划线（常用）</td></tr><tr><td>overline</td><td>上划线。（几乎不用）</td></tr><tr><td>line-through</td><td>删除线。（不常用）</td></tr></tbody></table><p>pink 老师总结：重点记住如何<strong>添加下划线</strong>，如何<strong>删除下划线</strong> 即可。</p><h2 id="4-4-文本缩进"><a href="#4-4-文本缩进" class="headerlink" title="4.4 文本缩进"></a>4.4 文本缩进</h2><p><strong>text-indent</strong> 属性用来指定文本的第一行缩进，通常是将<strong>段落的首行缩进</strong>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;    txst-indent: <span class="hljs-number">10px</span>;&#125;<br></code></pre></td></tr></table></figure><p>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;&#125;<br></code></pre></td></tr></table></figure><p><strong>em</strong> 是一个相对单位，就是<strong>当前元素（font-size）1个文字的大小</strong>，如果当前元素没有设置大小，则会按照父元素的1个文字大小。</p><h2 id="4-5-行间距（行高）"><a href="#4-5-行间距（行高）" class="headerlink" title="4.5 行间距（行高）"></a>4.5 行间距（行高）</h2><p>line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">26px</span>;    or    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.2em</span>;&#125;<br></code></pre></td></tr></table></figure><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\行高.jpg" width=500 /><h2 id="4-6-文本属性总结"><a href="#4-6-文本属性总结" class="headerlink" title="4.6 文本属性总结"></a>4.6 文本属性总结</h2><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td><td>我们通常用 十六进制 而且是简写形式 #ffff</td></tr><tr><td>text-align</td><td>文本对齐</td><td>可以设定文字水平的对齐方式</td></tr><tr><td>text-indent</td><td>文本缩进</td><td>通常我们用于段落首行缩进2个字的距离 text-indent: 2em;</td></tr><tr><td>text-decoration</td><td>文本修饰</td><td>记住 添加下划线 underline 取消下划线 none</td></tr><tr><td>line-height</td><td>行高</td><td>控制行与行之间的距离</td></tr></tbody></table><h2 id="5-CSS引入方式"><a href="#5-CSS引入方式" class="headerlink" title="5. CSS引入方式"></a>5. CSS引入方式</h2><h2 id="5-1-CSS-的三种样式表"><a href="#5-1-CSS-的三种样式表" class="headerlink" title="5.1 CSS 的三种样式表"></a>5.1 CSS 的三种样式表</h2><p>按照 CSS 样式的书写的位置（或者引入的方式），CSS 样式表可以分为三大类：</p><ol><li>行内样式表（行内表）</li><li>内部样式表（嵌入式）</li><li>外部样式表（链接式）</li></ol><h2 id="5-2-内部样式表"><a href="#5-2-内部样式表" class="headerlink" title="5.2 内部样式表"></a>5.2 内部样式表</h2><p>内部样式表（内嵌样式表）是写到 html 页面内部，是将所有的 CSS 代码抽取出来，单独放到一个 <code>&lt;style&gt;</code> 标签中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<span class="hljs-selector-tag">div</span> &#123;        <span class="hljs-attribute">color</span>: red;        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;&#125;&lt;/style&gt;<br></code></pre></td></tr></table></figure><ul><li><code>&lt;style&gt;</code>标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的<code>&lt;head&gt;</code>标签中</li><li>通过此种方式，可以方便控制当前整个页面中的元素样式设置</li><li>代码结构清晰，但是并没有实现结构与样式完全分离</li><li>使用内部样式表设定 CSS，通常也被称为<strong>嵌入式引入</strong>，这种方式是我们练习时常用的方式</li></ul><h2 id="5-3-行内样式表"><a href="#5-3-行内样式表" class="headerlink" title="5.3 行内样式表"></a>5.3 行内样式表</h2><p>行内样式表（内联样式表）是在元素标签内部的style属性中设定CSS样式表。适合于修改简单样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red; font-size: 12px;&quot;</span> &gt;</span>青春不常在，抓紧谈恋爱<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>style其实就是标签的属性</li><li>在双引号中间，写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li><li>由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用</li><li>使用行内样式表设定 CSS，通常也被称为<strong>行内式引入</strong></li></ul><h2 id="5-4-外部样式表⭐⭐⭐"><a href="#5-4-外部样式表⭐⭐⭐" class="headerlink" title="5.4 外部样式表⭐⭐⭐"></a>5.4 外部样式表⭐⭐⭐</h2><p>实际开发都是外部样式表，适合于样式比较多的情况，核心是：样式单独写到 CSS 文件中，之后把 CSS 文件引入到 HTML 页面中使用。</p><p>引入外部样式表分为两步：</p><ol><li>新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。</li><li>在 HTML 页面中，使用<code>&lt;link&gt;</code>标签引入这个文件。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css文件路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-5-CSS-引入方式总结"><a href="#5-5-CSS-引入方式总结" class="headerlink" title="5.5 CSS 引入方式总结"></a>5.5 CSS 引入方式总结</h2><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>结构样式混写</td><td>较少</td><td>控制一个标签</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，吐血推荐</td><td>控制多个页面</td></tr></tbody></table><h2 id="1-Emmet-语法（办公更高效）⭐⭐⭐"><a href="#1-Emmet-语法（办公更高效）⭐⭐⭐" class="headerlink" title="1. Emmet 语法（办公更高效）⭐⭐⭐"></a>1. Emmet 语法（办公更高效）⭐⭐⭐</h2><h2 id="1-1-快速生成HTML结构语法"><a href="#1-1-快速生成HTML结构语法" class="headerlink" title="1.1 快速生成HTML结构语法"></a>1.1 快速生成HTML结构语法</h2><ol><li>生成标签 直接输入标签名 按tab键即可 比如 div 然后 tab键，就可以生成<code>&lt;div&gt;&lt;/div&gt;</code></li><li>如果想要<strong>生成多个相同标签</strong> 加上<code>*</code>就可以了 比如 <code>div*3</code> 就可以快速生成3个div</li><li>如果有<strong>父子级关系</strong>标签，用 &gt; 就可以了 比如 ul &gt; li</li><li>如果有<strong>兄弟关系</strong>标签，用 + 就可以了 比如 div + p</li><li>如果生成带有<strong>类名</strong>或者<strong>id名字</strong>的，比直接写 <strong>.demo</strong> 或者 <strong>#two</strong>  再按tab键即可</li><li>如果生成的div类名是<strong>有顺序的</strong>，可以用<strong>自增符号 $</strong></li><li>如果想要<strong>在生成的标签内部写内容</strong>可以用 <strong>{ }</strong> 表示</li></ol><h2 id="1-2-快速生成CSS样式语法"><a href="#1-2-快速生成CSS样式语法" class="headerlink" title="1.2 快速生成CSS样式语法"></a>1.2 快速生成CSS样式语法</h2><p>CSS  基本采取简写形式即可</p><ol><li>比如 w200 按 tab 可以生成 width: 200px;</li><li>比如 lh26 按tab 可以生成 line-height: 26px;</li></ol><h2 id="1-3-快速格式化代码"><a href="#1-3-快速格式化代码" class="headerlink" title="1.3 快速格式化代码"></a>1.3 快速格式化代码</h2><p>Vscode 快速格式化代码： shift + alt + f</p><p>也可以在 设置中搜索 <strong>format</strong> 勾选 <strong>Editor: Format On Save</strong> 即可</p><p>设置后，以后都可以自动<strong>保存时格式化代码</strong></p><h2 id="1-CSS复合选择器"><a href="#1-CSS复合选择器" class="headerlink" title="1. CSS复合选择器"></a>1. CSS复合选择器</h2><p>在 CSS 中，可以根据选择器的类型把选择器分为<strong>基础选择器</strong>和<strong>复合选择器</strong>，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。</p><ul><li>复合选择器可以更准确、更高效的选择目标元素（标签）</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li><li>常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器等等</li></ul><h2 id="1-2-后代选择器（重要）⭐⭐⭐"><a href="#1-2-后代选择器（重要）⭐⭐⭐" class="headerlink" title="1.2 后代选择器（重要）⭐⭐⭐"></a>1.2 后代选择器（重要）⭐⭐⭐</h2><p><strong>后代选择器</strong>又称为<strong>包含选择器</strong>，可以选择在父元素里面的子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就称为外层标签的后代。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">元素<span class="hljs-number">1</span> 元素<span class="hljs-number">2</span> &#123; 样式声明 &#125;  <span class="hljs-comment">/* 选择 元素1 里面所有的 元素2 标签元素 */</span><br></code></pre></td></tr></table></figure><p>上述语法表示表示 <strong>元素1 里面的所有 元素2</strong> （后代元素）</p><ul><li>元素1 和 元素2 中间用<strong>空格隔开</strong></li><li>元素1是父级，元素2是子级，最终选择的是<strong>元素2</strong></li><li>元素2 可以是儿子，也可以是孙子等，只要是元素1的后代即可。</li><li>元素1 和 元素2 <strong>可以是任意基础选择器</strong></li></ul><h2 id="1-3-子选择器（重要）"><a href="#1-3-子选择器（重要）" class="headerlink" title="1.3 子选择器（重要）"></a>1.3 子选择器（重要）</h2><p><strong>子元素选择器（子选择器）</strong>只能选择作为某元素的最近一级元素。简单理解就是选亲儿子元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">元素<span class="hljs-number">1</span>&gt;元素<span class="hljs-number">2</span> &#123; 样式声明 &#125;<br></code></pre></td></tr></table></figure><p>上述语法表示选择元素1里面的<strong>所有</strong>直接后代（子元素）元素2。</p><ul><li>元素1 和 元素2 中间用<strong>大于号</strong>隔开</li><li>元素1是父级，元素2是子级，<strong>最终选择的是元素2</strong></li><li>元素2必须是<strong>亲儿子</strong>，其孙子、重孙之类都不归他管，你也可以叫他 亲儿子选择器</li></ul><h2 id="1-4-并集选择器（重要）"><a href="#1-4-并集选择器（重要）" class="headerlink" title="1.4 并集选择器（重要）"></a>1.4 并集选择器（重要）</h2><p><strong>并集选择器可以选择多组标签，同时为他们定义相同的样式</strong>。通常用于集体声明。</p><p><strong>并集选择器</strong>是各选择器<strong>通过英文逗号“，”链接而成</strong>，任何形式的选择器都可以作为并集选择器的一部分。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">元素<span class="hljs-number">1</span>，元素<span class="hljs-number">2</span> &#123;    样式声明&#125; <br></code></pre></td></tr></table></figure><p>上述语法表示<strong>选择器元素1 和 选择器元素2</strong>。</p><ul><li>元素1 和 元素2 中间用<strong>逗号隔开</strong></li><li>逗号可以理解为<strong>和</strong>的意思</li><li>并集选择器通常用于集体声明</li></ul><h2 id="1-6-链接伪类选择器⭐⭐⭐"><a href="#1-6-链接伪类选择器⭐⭐⭐" class="headerlink" title="1.6 链接伪类选择器⭐⭐⭐"></a>1.6 链接伪类选择器⭐⭐⭐</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>选择所有未被访问的链接<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>选择所有已被访问的链接<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>选择鼠标指针位于其上的链接(鼠标指向的链接)<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>选择活动链接（鼠标按下未弹起）<br></code></pre></td></tr></table></figure><p><strong>链接伪类选择器注意事项</strong></p><ol><li>为了确保生效，请按照 <strong>LVHA</strong> 的顺序声明：:link    :visited    :hover    :active</li><li>记忆法：LV 包包 hao 好</li><li>因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</li></ol><p><strong>链接伪类选择器实际工作开发中的写法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> 是标签选择器 所有的链接<span class="hljs-selector-tag">a</span> &#123;    <span class="hljs-attribute">color</span>: gray;&#125;hover 是链接伪类选择器 （鼠标经过）<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;    <span class="hljs-attribute">color</span>: red;  鼠标经过的时候，由原来的 灰色 变成了 红色&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-focus-伪类选择器"><a href="#1-7-focus-伪类选择器" class="headerlink" title="1.7 :focus 伪类选择器"></a>1.7 :focus 伪类选择器</h2><p><strong>:focus伪类选择器</strong>用于选择<strong>获得焦点的</strong>表单元素。</p><p>焦点就是光标，一般情况下<code>&lt;input&gt;</code> 类表单元素才能获取，因此这个选择器也主要针对于表单元素来说。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;    <span class="hljs-attribute">background-color</span>: yellow;&#125;<br></code></pre></td></tr></table></figure><h2 id="1-8-复合选择器总结"><a href="#1-8-复合选择器总结" class="headerlink" title="1.8 复合选择器总结"></a>1.8 复合选择器总结</h2><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> .nav a</td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是<strong>大于</strong> .nav&gt;p</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是<strong>逗号</strong> .nav, .hader</td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住 a{ } 和 a:hover 实际开发的写法</td></tr><tr><td>:focus</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>input:focus 记住这个写法</td></tr></tbody></table><h2 id="2-1-什么是元素显示模式"><a href="#2-1-什么是元素显示模式" class="headerlink" title="2.1 什么是元素显示模式"></a>2.1 什么是元素显示模式</h2><p>作用：网页的标签非常多，在不同地方会用到不同类型的标签，了解它们的特点<strong>可以更好的布局我们的网页</strong>。</p><p>元素显示模式就是<strong>元素（标签）以什么方式进行显示</strong>，比如<code>&lt;div&gt;</code>自己占一行，比如一行可以放多个<code>&lt;span&gt;</code>。</p><p>HTML元素一般分为<strong>块元素</strong>和<strong>行内元素</strong>两种类型。</p><h2 id="2-2-块元素"><a href="#2-2-块元素" class="headerlink" title="2.2 块元素"></a>2.2 块元素</h2><p>常见的块元素有 <code>&lt;h1&gt;~&lt;h6&gt;, &lt;p&gt;, &lt;div&gt;, &lt;ul&gt;, &lt;ol&gt;, &lt;li&gt;</code>等，其中 <code>&lt;div&gt;</code> 标签是<strong>最典型的块元素</strong>。</p><p>块元素的特点：</p><ol><li>比较霸道，自己独占一行</li><li>高度，宽度，外边距以及内边距都可以控制</li><li>宽度默认是容器（父亲宽度）的100%</li><li>是一个容器及盒子，里面可以放行内或者块级元素</li></ol><p><strong>注意</strong></p><ul><li>文字类的元素内不能使用块级元素</li><li><code>&lt;p&gt;</code>标签主要是用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></li><li>同理，<code>&lt;h1&gt;~&lt;h6&gt;</code>等都是文字类块级标签，里面也不能放其他块级元素</li></ul><h2 id="2-2-行内元素"><a href="#2-2-行内元素" class="headerlink" title="2.2 行内元素"></a>2.2 行内元素</h2><p>常见的行内元素有<code>&lt;a&gt;, &lt;strong&gt;, &lt;b&gt;, &lt;em&gt;, &lt;i&gt;, &lt;del&gt;, &lt;s&gt;, &lt;ins&gt;, &lt;u&gt;, &lt;span&gt;</code>等，其中**<code>&lt;span&gt;</code><strong>标签是</strong>最典型的行内标签<strong>。有的地方也将行内元素称为</strong>内联元素**。</p><p>行内元素的特点：</p><ol><li>相邻行内元素在一行上，一行可以显示多个</li><li>高，宽直接设置是无效的</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或其他行内元素</li></ol><p><strong>注意</strong></p><ul><li>链接里面不能再放链接</li><li>特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式是最安全的</li></ul><h2 id="2-3-行内块元素"><a href="#2-3-行内块元素" class="headerlink" title="2.3 行内块元素"></a>2.3 行内块元素</h2><p>在行内元素中有几个特殊的标签 <code>&lt;img /&gt;, &lt;input /&gt;, &lt;td&gt;</code>，它们同时具有块元素和行内元素的特点，</p><p>有些资料称它们为行内块元素。</p><p>行内块元素的特点：</p><ol><li>和相邻元素（行内块）在一行上，但是它们之间会有空白间隙。一行可以显示多个（行内元素的特带你）</li><li>默认宽度就是它们本身内容的宽度（行内元素的特点）</li><li>高度，行高，外边距以及内边距都可以控制（块级元素的特点）</li></ol><h2 id="2-4-元素的显示模式总结"><a href="#2-4-元素的显示模式总结" class="headerlink" title="2.4 元素的显示模式总结"></a>2.4 元素的显示模式总结</h2><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或者其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h2 id="2-5-元素显示模式转换"><a href="#2-5-元素显示模式转换" class="headerlink" title="2.5 元素显示模式转换"></a>2.5 元素显示模式转换</h2><p>特殊情况下，我们需要元素模式的转换，简单理解：一个模式的元素需要另外一种模式的特性</p><p>比如想要增加链接<code>&lt;a&gt;</code>的触发范围</p><ul><li><strong>转换为块元素：display:block;</strong></li><li>转换为行内元素：display:inline;</li><li><strong>转化为行内块：display:inline-block;</strong></li></ul><h2 id="3-CSS-的背景"><a href="#3-CSS-的背景" class="headerlink" title="3.CSS 的背景"></a>3.CSS 的背景</h2><p>通过 CSS 的背景属性，可以给页面元素添加背景样式</p><p>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片的位置、背景图像固定等。</p><h2 id="3-1-背景颜色"><a href="#3-1-背景颜色" class="headerlink" title="3.1 背景颜色"></a>3.1 背景颜色</h2><p><strong>background-color</strong> 属性定义了元素的背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>: 颜色值;<br></code></pre></td></tr></table></figure><p>一般情况下与那苏背景颜色的默认值是<strong>transparent</strong>（透明），我们也可以手动指定背景颜色为透明色。</p><h2 id="3-2-背景图片"><a href="#3-2-背景图片" class="headerlink" title="3.2 背景图片"></a>3.2 背景图片</h2><p><strong>background-image</strong> 属性描述了元素的背景图像。实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片，优点是非常便于控制位置（精灵图也是一种运用场景）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: none | url (url)<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无背景图（默认的）</td></tr><tr><td>url</td><td>使用绝对或相对地址指定背景图像</td></tr></tbody></table><h2 id="3-3-背景平铺"><a href="#3-3-背景平铺" class="headerlink" title="3.3  背景平铺"></a>3.3  背景平铺</h2><p>如果需要在 HTML 页面上对背景图像进行平铺，可以使用 <strong>background-repeat</strong> 属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-repeat</span>:repeat | no-repet | repeat-x | repeat-y<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺（默认的）</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像在横向上平铺</td></tr><tr><td>repeaat-y</td><td>背景图像在纵向上平铺</td></tr></tbody></table><h2 id="3-4-背景图片位置"><a href="#3-4-背景图片位置" class="headerlink" title="3.4 背景图片位置"></a>3.4 背景图片位置</h2><ol><li>参数是方位名词</li></ol><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left top 和 top left 效果一致</li><li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li></ul><ol start="2"><li>参数是精确单位</li></ol><ul><li>如果参数值是精确坐标，那么第一个肯定是 X 坐标，第二个一定是 Y 坐标</li><li>如果只指定一个数值，那该数值一定是 X 坐标，另一个默认垂直居中</li></ul><ol start="3"><li>参数是混合单位</li></ol><ul><li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 X 坐标，第二个值是 Y 坐标</li></ul><h2 id="3-5-背景图像固定（背景附着）"><a href="#3-5-背景图像固定（背景附着）" class="headerlink" title="3.5 背景图像固定（背景附着）"></a>3.5 背景图像固定（背景附着）</h2><p><strong>background-attachment</strong> 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p><p>background-attachment 后期可以制作视差滚动的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-attachment</span> : scroll | fixed<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h2 id="3-6-背景复合写法"><a href="#3-6-背景复合写法" class="headerlink" title="3.6 背景复合写法"></a>3.6 背景复合写法</h2><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性 <strong>background</strong> 中。从而节约代码量</p><p>当使用简写属性时，没有特定的书写顺序，一般习惯约定顺序为：</p><p><strong>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</strong></p><p>这是实际开发中，我们更提倡的写法。</p><h2 id="3-7-背景色半透明"><a href="#3-7-背景色半透明" class="headerlink" title="3.7 背景色半透明"></a>3.7 背景色半透明</h2><p>CSS3 为我们提供了背景颜色半透明的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);<br></code></pre></td></tr></table></figure><ul><li>最后一个参数是alpha透明度，取值范围在0~1之间</li><li>我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);</li><li>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>CSS3新增属性，是 IE9+ 版本浏览器才支持的</li><li>但是现在实际开发，我们不太关注兼容性写法，可以放心使用。</li></ul><h2 id="3-8-背景总结"><a href="#3-8-背景总结" class="headerlink" title="3.8 背景总结"></a>3.8 背景总结</h2><table><thead><tr><th>背景</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>background</td><td>背景颜色</td><td>预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td>背景图片</td><td>url（图片路径）</td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/ no-repeat/ repeat-x / repeat-y</td></tr><tr><td>background-position</td><td>背景位置</td><td>length/ position  分别是 x 和 y 坐标</td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll（背景滚动）/ fixed（背景固定）</td></tr><tr><td>背景简写</td><td>书写更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</td></tr><tr><td>背景色半透明</td><td>背景颜色半透明</td><td>background: rgba(0,0,0,0.3);  后面必须是 4个值</td></tr></tbody></table><p>背景图片实际开发常见于<strong>logo</strong>或者一些<strong>装饰性的小图片</strong>或者是<strong>超大背景图片</strong>，优点是非常便于控制位置，（精灵图也是一种运用场景）</p><h2 id="1-CSS的三大特性"><a href="#1-CSS的三大特性" class="headerlink" title="1. CSS的三大特性"></a>1. CSS的三大特性</h2><p>CSS有三个非常重要的三个特性：层叠性，继承性，优先级。</p><h2 id="1-1-层叠性"><a href="#1-1-层叠性" class="headerlink" title="1.1 层叠性"></a>1.1 层叠性</h2><p>相同选择器给设置相同的样式，此时一个样式就会<strong>覆盖（层叠）</strong>另一个冲突的样式。层叠性主要解决样式冲突的问题</p><p>层叠性原则：</p><ul><li>样式冲突，遵循的言责就是<strong>就近原则</strong>，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><h2 id="1-2-继承性"><a href="#1-2-继承性" class="headerlink" title="1.2 继承性"></a>1.2 继承性</h2><p>CSS中的继承：子标签会继承父标签的某些样式，如文本颜色和字号。简单的理解就是：子承父业。</p><ul><li>恰当地使用继承可以简化代码，降低CSS样式的复杂性</li><li>子元素可以继承父元素的样式（<strong>text- ， font- ， line-</strong> 这些元素开头的可以继承，以及 <strong>color</strong> 属性）</li><li>继承的口诀：<strong>龙生龙，凤生凤，老鼠儿子会打洞</strong></li></ul><p><strong>行高的继承性</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;    <span class="hljs-attribute">font</span>: <span class="hljs-number">12px</span>/<span class="hljs-number">1.5</span> <span class="hljs-string">&quot;Microsoft YaHei&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li>行高可以跟单位也可以不跟单位</li><li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li><li>此时子元素的行高是：当前子元素的文字大小 * 1.5</li><li><strong>body 行高1.5 这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</strong></li></ul><h2 id="1-3-优先级"><a href="#1-3-优先级" class="headerlink" title="1.3 优先级"></a>1.3 优先级</h2><p>选择器权重如下表所示：</p><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承 或者 *</td><td>0，0，0，0</td></tr><tr><td>元素选择器</td><td>0，0，0，1</td></tr><tr><td>类选择器，伪类选择器</td><td>0，0，1，0</td></tr><tr><td>行内样式，style= “ ”</td><td>1，0，0，0</td></tr><tr><td>！important 重要的</td><td>∞无穷大</td></tr></tbody></table><p><strong>重要：继承的权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0</strong>。</p><p><strong>权重叠加</strong>：如果是复合选择器，则<strong>会有权重叠加，但是不会进位</strong></p><ul><li>div ul li    —&gt;    0,0,0,3</li><li>.nav ul li  —&gt;    0,0,1,2</li><li>a:hover    —&gt;   0,0,1,1</li></ul><h2 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1. 盒子模型"></a>1. 盒子模型</h2><p>页面不住要学习三大核心，盒子模型，浮动 和 定位。学习好盒子模型能非常好的帮助我们布局页面</p><h2 id="1-1-看透网页布局的本质"><a href="#1-1-看透网页布局的本质" class="headerlink" title="1.1  看透网页布局的本质"></a>1.1  看透网页布局的本质</h2><p>网页布局的过程：</p><ol><li>先准备好相关的网页元素，网页元素基本都是盒子Box</li><li>利用 CSS 设置好盒子样式，然后摆放到相应的位置</li><li>往盒子里面装内容</li></ol><p>网页布局的核心本质：<strong>就是利用 CSS 摆盒子</strong>。</p><h2 id="1-2-盒子模型（Box-Model）组成"><a href="#1-2-盒子模型（Box-Model）组成" class="headerlink" title="1.2 盒子模型（Box Model）组成"></a>1.2 盒子模型（Box Model）组成</h2><p>所谓<strong>盒子模型</strong>：就是把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p><p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框、外边距、内边距 和 实际内容</strong>、</p><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\OIP.jpg" /><h2 id="1-3-边框（border）"><a href="#1-3-边框（border）" class="headerlink" title="1.3 边框（border）"></a>1.3 边框（border）</h2><p>border可以设置元素的边框。边框有三部分组成：<strong>边框宽度（粗细 ）、边框样式、边框颜色</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border</span>: border-width || border-style || border-color<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td>边框的样式  <strong>重点记忆</strong>：solid（实线），dashed（虚线），dotted（点线）</td></tr><tr><td>border-color</td><td>边框的颜色</td></tr></tbody></table><p>CSS 边框允许你指定一个元素边框的<strong>样式</strong>和<strong>颜色</strong></p><p>边框简写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;  没有顺序限制<br></code></pre></td></tr></table></figure><p>边框的分开写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-top</span>: ...border-bottomo: ...border-left: ...border-right: ...<br></code></pre></td></tr></table></figure><h2 id="1-4-表格的细线边框"><a href="#1-4-表格的细线边框" class="headerlink" title="1.4 表格的细线边框"></a>1.4 表格的细线边框</h2><p><strong>border-collapse</strong> 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-collapse</span>:collapse;<br></code></pre></td></tr></table></figure><ul><li>collapse 单词是合并的意思</li><li>border-collapse：collapse；表示相邻边框合并在一起</li></ul><h2 id="1-5-边框会影响盒子实际大小"><a href="#1-5-边框会影响盒子实际大小" class="headerlink" title="1.5 边框会影响盒子实际大小"></a>1.5 边框会影响盒子实际大小</h2><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p><ol><li>测量盒子大小的时候，不量边框</li><li>如果测量的时候包含了边框，则需要width/height 减去边框宽度</li></ol><h2 id="1-6-内边距（padding）"><a href="#1-6-内边距（padding）" class="headerlink" title="1.6 内边距（padding）"></a>1.6 内边距（padding）</h2><p><strong>padding</strong> 属性用于设置内边距，即边框与内容之间的距离。</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><p><strong>padding</strong>属性（简写属性）可以有一到四个值。</p><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>padding：5px；</td><td>1个值，代表上下左右都有5像素内边框</td></tr><tr><td>padding：5px 10px；</td><td>2个值，代表上下内边距是5像素 左右内边距是10像素</td></tr><tr><td>padding：5px 10px 20px；</td><td>3个值，代表上内边距5像素，左右内边距10像素，下内边距20像素</td></tr><tr><td>padding：5px 10px 20px 30px</td><td>4个值，上5像素，右10像素，下20像素，左30像素（顺时针）</td></tr></tbody></table><p><strong>以上4种情况，我们实际开发都会遇到</strong></p><p>当我们给盒子指定<strong>padding</strong>值之后，发生了2件事情：</p><ol><li>内容和边框有了距离，添加了内边距</li><li>padding影响了盒子实际大小</li></ol><p>也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子</p><p><strong>解决方案：</strong></p><p>如果保证盒子跟效果图大小保持一致，则让 wdith/height 减去多出来的内边距大小即可。</p><p>如果盒子本身没有指定 width / height 属性，则此时 padding 不会撑开盒子大小</p><h2 id="1-7-外边距（margin）"><a href="#1-7-外边距（margin）" class="headerlink" title="1.7 外边距（margin）"></a>1.7 外边距（margin）</h2><p><strong>margin</strong> 属性用于设置外边距，即控制盒子和盒子之间的距离。</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p>margin 简写方式代表的意义跟padding完全一致。</p><h2 id="1-7-外边距典型应用"><a href="#1-7-外边距典型应用" class="headerlink" title="1.7 外边距典型应用"></a>1.7 外边距典型应用</h2><p>外边距可以让块级盒子<strong>水平居中</strong>，但是必须满足两个条件：</p><ol><li>盒子必须指定了宽度（width）</li><li>盒子<strong>左右的外边距</strong>都设置为auto</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.header</span> &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">960px</span>;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;&#125;<br></code></pre></td></tr></table></figure><p>常见的写法，以下三种都可以：</p><ul><li>margin-left：auto；    margin-right：auto；</li><li>margin：auto；</li><li><strong>margin：0 auto；</strong></li></ul><p><strong>注意</strong>：以上方法是让块级元素水平居中，<strong>行内元素或者行内块元素水平居中给其父亲添加 text-aglign：center 即可</strong>。</p><h2 id="1-8-外边距合并"><a href="#1-8-外边距合并" class="headerlink" title="1.8 外边距合并"></a>1.8 外边距合并</h2><p>使用 <strong>margin</strong> 定义块元素的垂直边距时，可能会出现外边距的合并。</p><p><strong>2.嵌套块元素垂直外边距的塌陷</strong></p><p>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距的同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\taxian.png" /><p>解决方案：</p><ol><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边框</li><li>可以为父元素添加 overflow：hidden；</li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有塌陷的问题，后面咱们再总结。</p><h2 id="1-9-清除内外边距（CSS第一句，必写）⭐⭐⭐"><a href="#1-9-清除内外边距（CSS第一句，必写）⭐⭐⭐" class="headerlink" title="1.9 清除内外边距（CSS第一句，必写）⭐⭐⭐"></a>1.9 清除内外边距（CSS第一句，必写）⭐⭐⭐</h2><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;清除内边距    <span class="hljs-attribute">margin</span>：<span class="hljs-number">0</span>；   清除外边距&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</strong>。</p><h2 id="VSCode的骚操作⭐⭐⭐⭐⭐"><a href="#VSCode的骚操作⭐⭐⭐⭐⭐" class="headerlink" title="VSCode的骚操作⭐⭐⭐⭐⭐"></a>VSCode的骚操作⭐⭐⭐⭐⭐</h2><p><strong>shift+alt 同时选中多行内容！！！</strong></p><h2 id="4-圆角边框（重点）⭐⭐⭐"><a href="#4-圆角边框（重点）⭐⭐⭐" class="headerlink" title="4. 圆角边框（重点）⭐⭐⭐"></a>4. 圆角边框（重点）⭐⭐⭐</h2><p>在 CSS3 中，新增了<strong>圆角边框</strong>样式，这样我们的盒子就可以变圆角了。</p><p><strong>border-radius</strong> 属性用于设置元素的外边框圆角。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>: length;<br></code></pre></td></tr></table></figure><p><strong>radius半径（圆的半径）原理</strong>：（椭）圆与边框的交集形成圆角效果。</p><ul><li>参数值可以为<strong>数值</strong>或<strong>百分比</strong>的形式</li><li>如果是正方形，想要设置一个圆，把数值修改为<strong>高度或宽度一半</strong>即可，或者直接写为<strong>50%</strong></li><li>该属性是一个<strong>简写属性</strong>，可以跟四个值，分别代表<strong>左上角、右上角、右小角、左下角</strong></li><li>分开写法：border-top-left-radius、border-top-right-radius…..（不常用）</li></ul><h2 id="5-盒子阴影（重点）⭐⭐⭐"><a href="#5-盒子阴影（重点）⭐⭐⭐" class="headerlink" title="5. 盒子阴影（重点）⭐⭐⭐"></a>5. 盒子阴影（重点）⭐⭐⭐</h2><p>CSS3 中新增了盒子阴影，我们可以使用 <strong>box-shadow</strong> 属性为盒子添加阴影。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;<br></code></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需，水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td>必需，垂直阴影的位置。允许负值</td></tr><tr><td>blur</td><td>可选，模糊距离（清晰度）</td></tr><tr><td>spread</td><td>可选，阴影的尺寸（阴影大小）</td></tr><tr><td>color</td><td>可选，阴影的颜色</td></tr><tr><td>inset</td><td>可选，将外部阴影（outset）改为内部阴影</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li>默认的是外部阴影（outset），但是不可以写这个单词，否则导致阴影无效</li><li>盒子阴影不占用空间，不会影响其他盒子排列</li></ol><h2 id="6-文字阴影（不常用）"><a href="#6-文字阴影（不常用）" class="headerlink" title="6. 文字阴影（不常用）"></a>6. 文字阴影（不常用）</h2><p>在 CSS3 中，我们可以使用 <strong>text-shadow</strong> 属性将阴影应用于文本。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-shadow</span>: h-shadow v-shadow blur color;<br></code></pre></td></tr></table></figure><h2 id="1-浮动（float）"><a href="#1-浮动（float）" class="headerlink" title="1. 浮动（float）"></a>1. 浮动（float）</h2><h2 id="1-2-标准流（普通流-文档流）"><a href="#1-2-标准流（普通流-文档流）" class="headerlink" title="1.2 标准流（普通流/文档流）"></a>1.2 标准流（普通流/文档流）</h2><p><strong>所谓的标准流：就是标签按照规定好的默认方式排列。</strong></p><ol><li>块级元素会独占一行，从上向下顺序排列</li></ol><ul><li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li></ul><ol start="2"><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行</li></ol><ul><li>常用元素：span、a、i、em等</li></ul><p>以上都是标准流布局，我们前面学习的就是标准流，<strong>标准流是最基本的布局方式</strong>。</p><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p><p><strong>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式）。</strong></p><h2 id="1-3-为什么需要浮动？"><a href="#1-3-为什么需要浮动？" class="headerlink" title="1.3 为什么需要浮动？"></a>1.3 为什么需要浮动？</h2><p>总结：有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。因为浮动可以改变元素标签默认的排列方式。</p><p>浮动最典型的应用：可以让多个块级元素一行内排列显示。</p><p>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong></p><h2 id="1-4-什么是浮动？"><a href="#1-4-什么是浮动？" class="headerlink" title="1.4 什么是浮动？"></a>1.4 什么是浮动？</h2><p><strong>float</strong>属性用于创建浮动框，将其移动到一边，直到左边缘或者右边缘触及包含块或另一个浮动框的边缘。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123; foloat：属性值； &#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动（默认值）</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><h2 id="1-5-浮动特性（重难点）"><a href="#1-5-浮动特性（重难点）" class="headerlink" title="1.5 浮动特性（重难点）"></a>1.5 浮动特性（重难点）</h2><p>设置了浮动（float）的元素最重要特性：</p><ol><li>脱离标准普通流的控制（浮）移动到指定位置（动），（俗称<strong>脱标</strong>）</li><li>浮动的盒子<strong>不再保留原先的位置</strong></li></ol><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\tuobiao.gif" width="300px"/><ol start="2"><li>如果多个盒子都设置了浮动，则它们会按照属性值<strong>一行内显示并且顶端对齐排列</strong></li></ol><p><strong>注意：浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行显示</strong>。</p><ol start="3"><li>浮动元素会具有韩哥你快元素特性。</li></ol><p>任何元素都可以浮动，不管原先是什么模式的元素，添加浮动之后具有<strong>行内块元素</strong>相似的特性。</p><ul><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li><li>行内元素同理</li></ul><h2 id="1-6-浮动元素经常和标准流父级搭配使用"><a href="#1-6-浮动元素经常和标准流父级搭配使用" class="headerlink" title="1.6 浮动元素经常和标准流父级搭配使用"></a>1.6 浮动元素经常和标准流父级搭配使用</h2><p>为了约束浮动元素位置，我们网页布局一般采取的策略是：</p><p><strong>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置，符合网页布局第一准则。</strong></p><h2 id="2-常见的网页布局"><a href="#2-常见的网页布局" class="headerlink" title="2. 常见的网页布局"></a>2. 常见的网页布局</h2><h2 id="2-2-浮动布局的注意点"><a href="#2-2-浮动布局的注意点" class="headerlink" title="2.2 浮动布局的注意点"></a>2.2 浮动布局的注意点</h2><ol><li>浮动和标准流的父盒子搭配</li></ol><p><strong>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</strong></p><ol start="2"><li>一个元素浮动了，理论上其余的兄弟元素也要浮动</li></ol><p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题。</p><p><strong>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</strong>。</p><h2 id="3-清除浮动"><a href="#3-清除浮动" class="headerlink" title="3. 清除浮动"></a>3. 清除浮动</h2><h2 id="3-1-为什么需要清除浮动？"><a href="#3-1-为什么需要清除浮动？" class="headerlink" title="3.1 为什么需要清除浮动？"></a>3.1 为什么需要清除浮动？</h2><p>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。</p><ul><li>由于浮动元素不在占用原文档的位置，所以它会对后面的元素排版产生影响。</li></ul><h2 id="3-2-清除浮动本质"><a href="#3-2-清除浮动本质" class="headerlink" title="3.2 清除浮动本质"></a>3.2 清除浮动本质</h2><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li><strong>清除浮动之后，父级就会根据浮动的盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></li></ul><h2 id="3-3-清除浮动"><a href="#3-3-清除浮动" class="headerlink" title="3.3 清除浮动"></a>3.3 清除浮动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器&#123; <span class="hljs-attribute">clear</span>：属性值； &#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>我们实际工作中，几乎只用<strong>clear：both；</strong></p><p><strong>清除浮动的策略是：闭合浮动（只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子）</strong></p><h2 id="3-3-清除浮动的方法"><a href="#3-3-清除浮动的方法" class="headerlink" title="3.3 清除浮动的方法"></a>3.3 清除浮动的方法</h2><h2 id="1-额外标签法也称为隔墙法，是W3C推荐的做法。"><a href="#1-额外标签法也称为隔墙法，是W3C推荐的做法。" class="headerlink" title="1. 额外标签法也称为隔墙法，是W3C推荐的做法。"></a>1. 额外标签法也称为隔墙法，是W3C推荐的做法。</h2><p><strong>额外标签法</strong>会在浮动元素末尾添加一个空的标签。例如<code>&lt;div style=&quot;clear:both&quot; &gt;&lt;/div&gt;</code>,或者其他标签（如<code>&lt;br/&gt;</code>等）。</p><ul><li>优点：通俗易懂，书写方便</li><li>缺点：添加许多无意义的标签，结构化较差</li></ul><p><strong>注意：要求这个新的空标签必须是块级元素</strong></p><h2 id="2-父级添加overflow属性"><a href="#2-父级添加overflow属性" class="headerlink" title="2. 父级添加overflow属性"></a>2. 父级添加overflow属性</h2><p>可以给父级添加<strong>overflow</strong>属性，将其属性值设置为<strong>hidden、auto</strong>或<strong>scroll</strong>。</p><p>子不教，父之过，注意是给父元素添加代码</p><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li></ul><h2 id="3-父级添加after伪元素"><a href="#3-父级添加after伪元素" class="headerlink" title="3. 父级添加after伪元素"></a>3. 父级添加after伪元素</h2><p>：after 方式是而外表标签法的升级版。也是给父元素添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:after &#123;    content: <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-attribute">display</span>: block;    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">clear</span>: both;    <span class="hljs-attribute">visibility</span>: hidden;&#125;<span class="hljs-selector-class">.clearfix</span> &#123;  <span class="hljs-comment">/* IE6 IE7 专有 */</span>    *zoom: <span class="hljs-number">1</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：照顾低版本浏览器</li><li>代表网站：百度、淘宝、网易等</li></ul><h2 id="4-父级添加双伪元素"><a href="#4-父级添加双伪元素" class="headerlink" title="4. 父级添加双伪元素"></a>4. 父级添加双伪元素</h2><p>也是给父元素添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:before,.clearfix:after &#123;    content:<span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-attribute">display</span>:table;&#125;<span class="hljs-selector-class">.clearfix</span>:after &#123;    clear:both;&#125;<span class="hljs-selector-class">.clearfix</span> &#123;    *zoom:<span class="hljs-number">1</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li>优点：代码更简洁</li><li>缺点：照顾低版本浏览器</li><li>代表网站：小米、腾讯等</li></ul><h2 id="3-4-清除浮动总结"><a href="#3-4-清除浮动总结" class="headerlink" title="3.4 清除浮动总结"></a>3.4 清除浮动总结</h2><p><strong>为什么需要清除浮动？</strong></p><ol><li>父级没有高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了</li></ol><table><thead><tr><th>清除浮动的方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法（隔墙法）</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差。</td></tr><tr><td>父级overflow：hidden；</td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级after伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after，兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构化语义正确</td><td>由于IE6-7不支持：after，兼容性问题</td></tr></tbody></table><h2 id="5-3-CSS属性的书写顺序（重点）⭐⭐⭐"><a href="#5-3-CSS属性的书写顺序（重点）⭐⭐⭐" class="headerlink" title="5.3 CSS属性的书写顺序（重点）⭐⭐⭐"></a>5.3 CSS属性的书写顺序（重点）⭐⭐⭐</h2><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display / position / float / clear / visibility / overflow (建议display第一个写，毕竟关系到模式)</li><li>自身属性：width / height / margin / padding / border / backfround</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white-space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient…</li></ol><h2 id="5-4-页面布局整体思路"><a href="#5-4-页面布局整体思路" class="headerlink" title="5.4 页面布局整体思路"></a>5.4 页面布局整体思路</h2><p>为了提高网页制作的效率，布局时通常有以下的整体思路：</p><ol><li>必须确定页面的版心（可视区），我们测量可得知。</li><li>分析页面中的行模块，以及每个行模块中的列模块。页面布局第一准则。</li><li>一行中的列模块经常浮动布局，先确定每个列的大小，之后确定列的位置。页面布局第二准则</li><li>制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要。</li><li>所以，先理清楚<strong>布局结构</strong>，再写代码尤为重要，这需要我们多写多积累。</li></ol><p>导航栏注意点：</p><p><strong>实际开发中，我们不会直接用链接 a 而是用 li 包含链接（li+a）的做法。</strong></p><ol><li><strong>li + a 语义更清晰</strong>，一看这就是有条理的列表型内容。</li><li>如果直接用 a，搜索引擎容易辨别为有堆砌关键字的嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名。</li></ol><p><strong>注意：</strong></p><ol><li>让导航栏一行显示，给 li 加浮动，因为 li 是块级元素，需要一行显示</li><li>这个 nav 导航栏可以不给宽度，将来可以继续添加其余文字</li><li>因为导航栏里面的文字不一样多，所以最好给链接 a 左右 padding 撑开盒子，而不是指定宽度</li></ol><h2 id="1-定位"><a href="#1-定位" class="headerlink" title="1. 定位"></a>1. 定位</h2><h2 id="1-1-为什么需要定位"><a href="#1-1-为什么需要定位" class="headerlink" title="1.1 为什么需要定位"></a>1.1 为什么需要定位</h2><ol><li><strong>某个元素可以自由的自在一个盒子内移动位置，并且压住其他盒子。</strong></li><li><strong>当我们滚动窗口的时候，盒子是固定在屏幕的某个位置的。</strong></li></ol><p>以上效果，标准流或浮动都无法快速实现，此时<strong>需要定位来实现</strong>。</p><p>所以：</p><ol><li>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子。</li><li>定位则是可以让盒子自由的在某个盒子内移动位置或者固定在屏幕中的某个位置，并且可以压住其他盒子。</li></ol><h2 id="1-2-定位组成"><a href="#1-2-定位组成" class="headerlink" title="1.2 定位组成"></a>1.2 定位组成</h2><p><strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子，按照定位的方式移动盒子</strong>。</p><p>定位 = 定位模式 + 边偏移。</p><p><strong>定位模式</strong>用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p><h3 id="1-定位模式"><a href="#1-定位模式" class="headerlink" title="1. 定位模式"></a>1. 定位模式</h3><p>定位模式决定元素的定位方式，它通过 CSS 的 <strong>position</strong>属性来设置，其值可以分为四个：</p><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td><strong>静态</strong>定位</td></tr><tr><td>ralative</td><td><strong>相对</strong>定位</td></tr><tr><td>absolute</td><td><strong>绝对</strong>定位</td></tr><tr><td>fixed</td><td><strong>固定</strong>定位</td></tr></tbody></table><h3 id="2-边偏移"><a href="#2-边偏移" class="headerlink" title="2. 边偏移"></a>2. 边偏移</h3><p>边偏移就是定位的盒子移动到最终的位置。有top、bottom、left 和 right 4 个属性。</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top：80px</td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td>bottom</td><td>bottom：80px</td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td>left</td><td>left：80px</td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td>right</td><td>right：80px</td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong>。</td></tr></tbody></table><h2 id="1-3-静态定位-static（了解）"><a href="#1-3-静态定位-static（了解）" class="headerlink" title="1.3 静态定位 static（了解）"></a>1.3 静态定位 static（了解）</h2><p>静态定位是元素的<strong>默认定位方式，无定位的意思</strong>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123; <span class="hljs-attribute">position</span>：static； &#125;<br></code></pre></td></tr></table></figure><ul><li>静态定位按照标准流特性摆放位置，它没有边偏移</li><li>静态定位在布局时很少用到</li></ul><h2 id="1-4-相对定位-relative（重要）"><a href="#1-4-相对定位-relative（重要）" class="headerlink" title="1.4 相对定位 relative（重要）"></a>1.4 相对定位 relative（重要）</h2><p><strong>相对定位</strong>是元素在移动位置的时候，是相对于它<strong>原来的位置</strong>来说的（自恋型）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123; <span class="hljs-attribute">position</span>：relative； &#125;<br></code></pre></td></tr></table></figure><p>相对定位的特点：（务必记住）</p><ol><li>它是相对于自己原来的位置来移动的（<strong>移动位置的时候参照点是自己原来的位置</strong>）。</li><li><strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它。（<strong>不脱标，继续保留原来位置</strong>）</li></ol><p>因此，相对定位并没有脱标。它最典型的应用是给绝对定位当爹的。。。</p><h2 id="1-5-绝对定位-absolute（重要）"><a href="#1-5-绝对定位-absolute（重要）" class="headerlink" title="1.5 绝对定位 absolute（重要）"></a>1.5 绝对定位 absolute（重要）</h2><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的（拼爹型）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123; <span class="hljs-attribute">position</span>：absolute； &#125;<br></code></pre></td></tr></table></figure><p>绝对定位的特点：（务必记住）</p><ol><li>如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器为准定位（Document文档）。</li><li>如果祖先元素有定位（相对、绝对、固定定位），则以最近一级有定位祖先元素为参考点移动位置。</li><li>绝对定位<strong>不再占有原先的位置</strong>。（脱标）</li></ol><h2 id="1-6-子绝父相的由来"><a href="#1-6-子绝父相的由来" class="headerlink" title="1.6 子绝父相的由来"></a>1.6 子绝父相的由来</h2><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。这个“<strong>子绝父相</strong>“太重要了，是我们学习定位的口诀，是定位中最常用的一种方式，这句话的意思是：<strong>子级是绝对定位的话，父级就要用相对定位</strong>。</p><ol><li>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</li><li>父盒子需要加定位限制子盒子在父盒子内显示。</li><li>父盒子布局时，需要占有位置，因此父亲只能是相对定位。</li></ol><p>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。</p><p>总结：<strong>因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位</strong></p><p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p><h2 id="1-7-固定定位-fixed（重要）"><a href="#1-7-固定定位-fixed（重要）" class="headerlink" title="1.7 固定定位 fixed（重要）"></a>1.7 固定定位 fixed（重要）</h2><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123; <span class="hljs-attribute">position</span>：fixed； &#125;<br></code></pre></td></tr></table></figure><p>固定定位的特点：（务必记住）</p><ol><li>以浏览器的可视窗口为参照点移动元素。</li></ol><ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li></ul><ol start="2"><li>固定定位<strong>不再占有原先的位置</strong>。</li></ol><p>固定定位也是脱标的，其实固定定位也可以看作是一种特殊的绝对定位。</p><h3 id="固定定位小技巧：固定在版心右侧位置。"><a href="#固定定位小技巧：固定在版心右侧位置。" class="headerlink" title="固定定位小技巧：固定在版心右侧位置。"></a>固定定位小技巧：固定在版心右侧位置。</h3><p>小算法：</p><ol><li>让固定定位的盒子 left：50%；走到浏览器可视区（也可以看作版心）的一半位置。</li><li>让固定定位的盒子 margin-left：（版心宽度的一半距离）；多走 版心宽度的一半位置</li></ol><p>就可以让固定定位的盒子贴着版心右侧对齐了。</p><h2 id="1-8-粘性定位-sticky（了解）"><a href="#1-8-粘性定位-sticky（了解）" class="headerlink" title="1.8 粘性定位 sticky（了解）"></a>1.8 粘性定位 sticky（了解）</h2><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。Sticky 粘性的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123; <span class="hljs-attribute">position</span>：sticky；<span class="hljs-attribute">top</span>：<span class="hljs-number">10px</span>； &#125;<br></code></pre></td></tr></table></figure><p>粘性定位的特点：</p><ol><li>以浏览器的可视窗口为参照点移动元素（固定定位的特点）</li><li>粘性定位<strong>占有原先的位置</strong>（相对定位的特点）</li><li>必须添加 top、left、right、bottom 其中的一个才有效</li></ol><p>跟页面滚动搭配使用。兼容性较差，IE不支持。</p><h2 id="1-9-定位的总结"><a href="#1-9-定位的总结" class="headerlink" title="1.9 定位的总结"></a>1.9 定位的总结</h2><table><thead><tr><th>定位模式</th><th>是否脱标</th><th>移动位置</th><th>是否常用</th></tr></thead><tbody><tr><td>static 静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative 相对定位</strong></td><td>否（占有位置）</td><td>相对于自身位置移动</td><td>常用</td></tr><tr><td><strong>absolute 绝对定位</strong></td><td>是（不占有位置）</td><td>带有定位的父级</td><td>常用</td></tr><tr><td><strong>fixed 固定定位</strong></td><td>是（不占有位置）</td><td>浏览器可视区</td><td>常用</td></tr><tr><td>sticky 粘性定位</td><td>否（占有位置）</td><td>浏览器可视区</td><td>当前阶段很少</td></tr></tbody></table><ol><li>一定要记住 相对定位、固定定位、绝对定位 两个大的特点：1.是否占有位置（脱标否）2.以谁为基准点移动位置。</li><li>学习定位重点学会 子绝父相。</li></ol><h2 id="1-10-定位的叠放次序-z-index"><a href="#1-10-定位的叠放次序-z-index" class="headerlink" title="1.10 定位的叠放次序 z-index"></a>1.10 定位的叠放次序 z-index</h2><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 <strong>z-index</strong>来控制盒子的前后次序（z轴）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123; <span class="hljs-attribute">z-index</span>：<span class="hljs-number">1</span>； &#125;<br></code></pre></td></tr></table></figure><ul><li>数值可以是正整数、负整数 或 0，默认是 auto，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才有 z-index 属性</li></ul><h2 id="1-11-定位的拓展"><a href="#1-11-定位的拓展" class="headerlink" title="1.11 定位的拓展"></a>1.11 定位的拓展</h2><h3 id="1-绝对定位的盒子居中，但是可以通过以下算法方法实现水平和垂直居中。"><a href="#1-绝对定位的盒子居中，但是可以通过以下算法方法实现水平和垂直居中。" class="headerlink" title="1. 绝对定位的盒子居中，但是可以通过以下算法方法实现水平和垂直居中。"></a>1. 绝对定位的盒子居中，但是可以通过以下算法方法实现水平和垂直居中。</h3><ol><li>left：50%；   让盒子的左侧移动到父级元素的水平中心位置</li><li>margin-left：-100px；   让盒子向左移动自身宽度的一半。</li></ol><h3 id="2-定位特殊特性"><a href="#2-定位特殊特性" class="headerlink" title="2. 定位特殊特性"></a>2. 定位特殊特性</h3><p>绝对定位和固定定位也和浮动类似。</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容大小。</li></ol><h3 id="3-脱标的盒子不会触发外边距塌陷"><a href="#3-脱标的盒子不会触发外边距塌陷" class="headerlink" title="3.脱标的盒子不会触发外边距塌陷"></a>3.脱标的盒子不会触发外边距塌陷</h3><p>浮动元素，绝对定位（固定定位）元素都不会触发外边距合并的问题。</p><h3 id="4-绝对定位（固定定位）会完全压住盒子"><a href="#4-绝对定位（固定定位）会完全压住盒子" class="headerlink" title="4. 绝对定位（固定定位）会完全压住盒子"></a>4. 绝对定位（固定定位）会完全压住盒子</h3><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p><p>但是绝对定位（固定定位）会压住下面标准流所有的内容</p><p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。文字会环绕浮动元素。</p><h2 id="4-元素的显示与隐藏"><a href="#4-元素的显示与隐藏" class="headerlink" title="4. 元素的显示与隐藏"></a>4. 元素的显示与隐藏</h2><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p><p>本质：<strong>让一个元素在页面中隐藏或者显示出来</strong></p><h3 id="4-1-display-属性-⭐⭐⭐"><a href="#4-1-display-属性-⭐⭐⭐" class="headerlink" title="4.1 display 属性 ⭐⭐⭐"></a>4.1 display 属性 ⭐⭐⭐</h3><p>display 属性用于设置一个元素应如何显示。</p><ol><li>display：none；隐藏对象</li><li>display：block；除了转换为块级元素之外，同时还有显示元素的意思</li></ol><p><strong>display 隐藏元素之后，不再占有原来的位置</strong></p><p>后面应用及其广泛，<strong>搭配 JS</strong> 可以做很多网页特效。</p><h3 id="4-2-visibility-可见性"><a href="#4-2-visibility-可见性" class="headerlink" title="4.2 visibility 可见性"></a>4.2 visibility 可见性</h3><p><strong>visibility</strong> 属性用于指定一个元素应可见还是隐藏。</p><ul><li>visibility：visible；元素可见</li><li>visibility：hidden；元素隐藏</li></ul><p><strong>visibility 隐藏元素后，继续占有原来的位置。</strong></p><p>如果隐藏元素想要原来的位置，就用 visibility：hidden</p><p>如果隐藏元素不想要原来位置，就用 display：none（用处更多 重点）</p><h2 id="4-3-overflow-溢出"><a href="#4-3-overflow-溢出" class="headerlink" title="4.3 overflow 溢出"></a>4.3 overflow 溢出</h2><p><strong>overflow</strong> 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度）时，会发生什么。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td>scroll</td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p>一半情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</p><p>但是如果有定位的盒子，请慎用 overflow：hidden 因为它会隐藏多余的部分。 </p><h2 id="1-1-为什么需要精灵图"><a href="#1-1-为什么需要精灵图" class="headerlink" title="1.1 为什么需要精灵图"></a>1.1 为什么需要精灵图</h2><p>一个网页中往往会应用很多小的背景图作为装饰，当网页中图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p><p>因此，<strong>为了有效地减少服务器接收和发送请求的次数，提页面的加载速度</strong>，出现了 <strong>CSS精灵技术</strong>（也称为 CSS Sprites、CSS 雪碧）。</p><p><strong>核心原理：将网页中的一些小图片整合到一张大图中，这样服务器只需要请求一次就可以了。</strong></p><h2 id="1-2-精灵图的使用"><a href="#1-2-精灵图的使用" class="headerlink" title="1.2 精灵图的使用"></a>1.2 精灵图的使用</h2><p>使用精灵图核心总结：</p><ol><li>精灵图主要针对于小的背景图片使用。</li><li>主要借助于背景位置来实现—-<strong>background-position</strong>。</li><li>一般情况下精灵图都是负值。（千万注意网页中的坐标：X轴右边走是正值，左走是负值，Y轴下走是正值）</li></ol><h2 id="2-1-字体图标的产生"><a href="#2-1-字体图标的产生" class="headerlink" title="2.1 字体图标的产生"></a>2.1 字体图标的产生</h2><p>字体图标使用场景：主要用于显示网页中通用、常用的一些小图标。</p><p>精灵图是由诸多优点的，但是缺点明显。</p><ol><li>图片文件还是比较大的</li><li>图片本身放大和缩小会失真</li><li>一旦图片制作完毕想要更换非常复杂</li></ol><p>此时，有一种技术的出现很好的解决了以上的问题，就是<strong>字体图标 iconfont</strong>。</p><p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质是属于字体</strong></p><h2 id="2-2-字体图标的优点"><a href="#2-2-字体图标的优点" class="headerlink" title="2.2 字体图标的优点"></a>2.2 字体图标的优点</h2><ul><li>轻量级：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，较少了服务器的请求。</li><li>灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</li><li>兼容性：几乎支持所有的浏览器，请放心使用</li></ul><p>注意：字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</p><p><strong>总结：</strong></p><ol><li>如果遇到一些结构和样式比较简单的小图标，就用字体图标</li><li>如果遇到一些结构和样式复杂一点的图片，就用精灵图</li></ol><h2 id="2-4-字体图标的引入"><a href="#2-4-字体图标的引入" class="headerlink" title="2.4 字体图标的引入"></a>2.4 字体图标的引入</h2><p>2.在 CSS 样式中全局声明字体：简单理解把这些字体文件通过 CSS 引入到我们页面中。</p><p>一定要注意字体文件路径的问题。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 字体声明 */</span>        <span class="hljs-keyword">@font-face</span> &#123;            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;icomoon&#x27;</span>;            <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.eot?tomleg&#x27;</span>);            <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.eot?tomleg#iefix&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;embedded-opentype&#x27;</span>),                <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.ttf?tomleg&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>),                <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.woff?tomleg&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),                <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.svg?tomleg#icomoon&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;svg&#x27;</span>);            <span class="hljs-attribute">font-weight</span>: normal;            <span class="hljs-attribute">font-style</span>: normal;            <span class="hljs-attribute">font-display</span>: block;        &#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-字体图标的追加"><a href="#2-5-字体图标的追加" class="headerlink" title="2.5 字体图标的追加"></a>2.5 字体图标的追加</h2><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p><p>把压缩包里面的 <strong>selection.json</strong> 重新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p><h2 id="3-CSS-三角"><a href="#3-CSS-三角" class="headerlink" title="3. CSS 三角"></a>3. CSS 三角</h2><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p><p>一张图，你就知道 CSS 三角是怎么来的了，做法如下：</p><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\CSSsanjiao.jpg" width=200px/><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">line-height</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">border</span>: <span class="hljs-number">50px</span> solid transparent;<span class="hljs-attribute">border-top-color</span>: pink;&#125;<br></code></pre></td></tr></table></figure><h2 id="4-CSS用户界面样式"><a href="#4-CSS用户界面样式" class="headerlink" title="4. CSS用户界面样式"></a>4. CSS用户界面样式</h2><h2 id="4-1-鼠标样式-cursor"><a href="#4-1-鼠标样式-cursor" class="headerlink" title="4.1 鼠标样式 cursor"></a>4.1 鼠标样式 cursor</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">cursor</span>：pointer;&#125;<br></code></pre></td></tr></table></figure><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>小白 默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><h2 id="4-2-轮廓线-outline"><a href="#4-2-轮廓线-outline" class="headerlink" title="4.2 轮廓线 outline"></a>4.2 轮廓线 outline</h2><p>给表单添加 outline：0；或者 outline：none；样式之后，就可以去掉默认的蓝色边框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span> &#123;<span class="hljs-attribute">outline</span>：<span class="hljs-attribute">none</span>；&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-防止拖拽文本域-resize"><a href="#4-3-防止拖拽文本域-resize" class="headerlink" title="4.3 防止拖拽文本域 resize"></a>4.3 防止拖拽文本域 resize</h2><p>实际开发中，我们文本域右下角是不可以拖拽的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">textarea</span> &#123;<span class="hljs-attribute">resize</span>：<span class="hljs-attribute">none</span>；&#125;<br></code></pre></td></tr></table></figure><h2 id="5-vertical-align-属性应用"><a href="#5-vertical-align-属性应用" class="headerlink" title="5. vertical-align 属性应用"></a>5. vertical-align 属性应用</h2><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\line.png" /><h2 id="5-1-图片、表单和文字对齐"><a href="#5-1-图片、表单和文字对齐" class="headerlink" title="5.1 图片、表单和文字对齐"></a>5.1 图片、表单和文字对齐</h2><p>图片表单都属于行内块元素，默认的 vertical-align 是基线对齐。</p><p>此时可以可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle</strong> 就可以让文字和图片垂直居中对齐了。</p><p><strong>注意：只有行内元素、行内块元素才有基线对齐</strong></p><h2 id="5-2-解决图片底部默认空白缝隙问题"><a href="#5-2-解决图片底部默认空白缝隙问题" class="headerlink" title="5.2 解决图片底部默认空白缝隙问题"></a>5.2 解决图片底部默认空白缝隙问题</h2><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素和文字的基线对齐。</p><p>主要解决方案有两种：</p><ol><li>给图片添加 <strong>vertical-align：midden | top | bottom <strong>等。</strong>（提倡使用的）</strong></li><li>把图片转化为块级元素 <strong>dispaly：block；</strong></li></ol><h2 id="6-溢出的文字省略号显示"><a href="#6-溢出的文字省略号显示" class="headerlink" title="6. 溢出的文字省略号显示"></a>6. 溢出的文字省略号显示</h2><h3 id="1-单行文本溢出显示省略号–必须满足三个条件"><a href="#1-单行文本溢出显示省略号–必须满足三个条件" class="headerlink" title="1. 单行文本溢出显示省略号–必须满足三个条件"></a>1. 单行文本溢出显示省略号–必须满足三个条件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 1. 先强制一行内显示文字 */</span><br><span class="hljs-attribute">white-space</span>：nowrap；（默认 <span class="hljs-attribute">normal</span> 自动换行）<br><span class="hljs-comment">/* 2. 超出的部分隐藏 */</span><span class="hljs-attribute">overflow</span>：hidden；<br><span class="hljs-comment">/* 3. 文字用省略号替代超出的部分 */</span><span class="hljs-attribute">text-overflow</span>：ellipsis；<br></code></pre></td></tr></table></figure><h3 id="2-多行文本溢出显示省略号"><a href="#2-多行文本溢出显示省略号" class="headerlink" title="2. 多行文本溢出显示省略号"></a>2. 多行文本溢出显示省略号</h3><p>多行文本溢出显示省略号，有较大的兼容性问题，适用于 webKit 浏览器或移动端（移动端大部分是 webKit内核）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span> : hidden;<br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br><span class="hljs-comment">/*弹性伸缩盒子模型显示*/</span><br><span class="hljs-attribute">display</span>: -webkit-box;<br><span class="hljs-comment">/*限制在一个块元素显示的文本的行数*/</span><br>-webkit-line-clamp: <span class="hljs-number">2</span>;<br><span class="hljs-comment">/*设置或检索伸缩盒对象的子元素的排列方式*/</span><br>-webkit-box-orient : vertical;<br></code></pre></td></tr></table></figure><p><strong>更推荐让后台人员来做这个效果，因为后台人员可以显示多少个字，操作更简单</strong></p><h2 id="7-常见布局技巧"><a href="#7-常见布局技巧" class="headerlink" title="7. 常见布局技巧"></a>7. 常见布局技巧</h2><h3 id="1-margin-负值的运用"><a href="#1-margin-负值的运用" class="headerlink" title="1. margin 负值的运用"></a>1. margin 负值的运用</h3><ol><li>让每个盒子 margin 往左侧移动 -1px 正好压住相邻盒子边框</li><li>鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有定位，则加相对定位（保留位置），如果有定位，则加 z-index）</li></ol><h3 id="4-CSS-直角三角形"><a href="#4-CSS-直角三角形" class="headerlink" title="4. CSS 直角三角形"></a>4. CSS 直角三角形</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">border-color</span>: transparent red transparent transparent;<span class="hljs-attribute">border-style</span>: solid;<span class="hljs-attribute">border-width</span>: <span class="hljs-number">22px</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h2 id="1-HTML5-的新特性"><a href="#1-HTML5-的新特性" class="headerlink" title="1.HTML5 的新特性"></a>1.HTML5 的新特性</h2><p><strong>HTML5</strong>的新增特性主要是针对于以前的不足，增加了一些<strong>新的标签、新的表单</strong>和<strong>新的表单属性</strong>等。</p><p>这些新特性都有兼容性问题，基本是IE9+以上版本的浏览器才支持,如果不考虑兼容性问题，可以大量使用这些新特性。</p><p>声明：</p><ol><li>新特性增加了很多，但是我们专注于开发常用的新特性。</li><li>基础班我们讲解部分新特性，到了就业班还会继续讲解其他新特性。</li></ol><h2 id="1-HTML5的新特性"><a href="#1-HTML5的新特性" class="headerlink" title="1.HTML5的新特性"></a>1.HTML5的新特性</h2><h3 id="1-1-HTML5新增的语义化标签"><a href="#1-1-HTML5新增的语义化标签" class="headerlink" title="1.1 HTML5新增的语义化标签"></a>1.1 HTML5新增的语义化标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span> :头部标签<span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span> :导航标签<span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>:内容标签<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span> :定义文档某个区域<span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span>:侧边栏标签<span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>:尾部标签<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>这种语义化标准主要是针对搜索引擎的这些新标签页面中可以使用多次</li><li>在IE9中，需要把这些元素转换为块级元素</li><li>其实，我们移动端更喜欢使用这些标签</li><li>HTML5还增加了很多其他标签，我们后面再慢慢学</li></ul><h3 id="1-2-HTML5-新增的多媒体标签"><a href="#1-2-HTML5-新增的多媒体标签" class="headerlink" title="1.2 HTML5 新增的多媒体标签"></a>1.2 HTML5 新增的多媒体标签</h3><p>HTML5在不使用插件的情况下，也可以原生的支持音频格式文件的播放，当然，支持的格式是有限的。</p><ol><li>视频<code>&lt;video&gt;</code></li></ol><p>语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;文件地址&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;240&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/ogg&quot;</span>&gt;</span><br>您的浏览器不支持Video标签。<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.视频<code>&lt;video&gt;</code>—— 常见属性</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>视频就绪自动播放(谷歌浏览器需要添加muted来解决自动播放问题)</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>width</td><td>pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>pixels(像素)</td><td>设置播放器高度</td></tr><tr><td>loop</td><td>loop</td><td>播放完是否继续播放该视频，循环播放</td></tr><tr><td>preload</td><td>auto(预先加载视频)<br />none(不应加载视频)</td><td>规定是否预加载视频(如果有了autoplay就忽略该属性)</td></tr><tr><td>src</td><td>url</td><td>视频url地址</td></tr><tr><td>poster</td><td>lmgurl</td><td>加载等待的画面图片</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><h3 id="1-2-HTML5新增的多媒体标签"><a href="#1-2-HTML5新增的多媒体标签" class="headerlink" title="1.2 HTML5新增的多媒体标签"></a>1.2 HTML5新增的多媒体标签</h3><p>HTMLS在不使用插件的情况下，也可以原生的支持音频格式文件的播放，当然，支持的格式是有限的。</p><ol start="2"><li>音频<code>&lt;audio&gt;</code></li></ol><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;文件地址&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span>&lt;/ audio&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/ogg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><br>您的浏览器不支持 audio 元素。<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常见属性</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放。</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放。</td></tr><tr><td>src</td><td>url</td><td>要播放的音频的URL。</td></tr></tbody></table><ol start="3"><li>多媒体标签总结</li></ol><ul><li>音频标签和视频标签使用方式基本一致浏览器支持情况不同</li><li>谷歌浏览器把音频和视频自动播放禁止了</li><li>我们可以给视频标签添加muted属性来静音播放视频，音频不可以(可以通过JavaScript解决)</li><li>视频标签是重点，我们常设置自动播放，不使用controls控件，循环和设置大小属性</li></ul><h3 id="1-3-HTML5新增的input类型"><a href="#1-3-HTML5新增的input类型" class="headerlink" title="1.3 HTML5新增的input类型"></a>1.3 HTML5新增的input类型</h3><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>type=”email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type=”url”</td><td>限制用户输入必须为URL类型</td></tr><tr><td>type=”date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=”time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=”month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=”week”</td><td>限制用户输入必须为周类型</td></tr><tr><td><strong>type=”number”</strong></td><td>限制用户输入必须为数字类型</td></tr><tr><td><strong>type=”tel”</strong></td><td>手机号码</td></tr><tr><td><strong>type=”search”</strong></td><td>搜索框</td></tr><tr><td>type=”color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><ul><li><strong>重点记住：number、tel、search 这三个</strong></li></ul><h3 id="1-4-HTML5新增的表单属性"><a href="#1-4-HTML5新增的表单属性" class="headerlink" title="1.4 HTML5新增的表单属性"></a>1.4 HTML5新增的表单属性</h3><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td><strong>placeholder</strong></td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>autocomplete</td><td>off / on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。<br/>默认已经打开，如autocomplete=”on“，关闭autocomplete =”off”<br />需要放在表单内，同时加上name属性，同时成功提交</td></tr><tr><td><strong>multiple</strong></td><td>multiple</td><td>可以多选文件提交</td></tr></tbody></table><p><strong>可以通过以下设置方式修改placeholder里面的字体颜色</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">::placeholder</span> &#123;<br><span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-CSS3的新特性"><a href="#2-CSS3的新特性" class="headerlink" title="2.CSS3的新特性"></a>2.CSS3的新特性</h2><p>cSS3给我们新增了选择器，可以更加便捷，更加自由的选择目标元素。</p><ol><li>属性选择器</li><li>结构伪类选择器</li><li><strong>伪元素选择器</strong></li></ol><h3 id="2-2属性选择器"><a href="#2-2属性选择器" class="headerlink" title="2.2属性选择器"></a>2.2属性选择器</h3><p>属性选择器可以<strong>根据元素特定属性</strong>的来选择元素。这样就可以不用借助于类或者id选择器。</p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E[ att ]</td><td>选择具有att属性的E元素</td></tr><tr><td>E[ att=”val” ]</td><td>选择具有att属性且属性值等于 val 的 E 元素</td></tr><tr><td>E[ attA=”val” ]</td><td>匹配具有att属性且值以 val 开头的 E 元素</td></tr><tr><td>E[ att$=”val” ]</td><td>匹配具有att属性且值以 val 结尾的 E 元素</td></tr><tr><td>E[ att*=”val” ]</td><td>匹配具有att属性且值中含有 val的 E 元素</td></tr></tbody></table><p><strong>类选择器、属性选择器 和 伪类选择器 权重都是 10</strong></p><h3 id="2-3结构伪类选择器"><a href="#2-3结构伪类选择器" class="headerlink" title="2.3结构伪类选择器"></a>2.3结构伪类选择器</h3><p>结构伪类选择器主要<strong>根据文档结构</strong>来选择器元素，常用于根据父级选择器里面的子元素</p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E：first-child</td><td>匹配父元素中的第一个子元素 E</td></tr><tr><td>E：last-child</td><td>匹配父元素中的最后一个元素 E</td></tr><tr><td><strong>E：nth-child(n)</strong></td><td>匹配父元素中的第n个子元素 E</td></tr><tr><td>E：first-of-type</td><td>指定类型 E 的第一个</td></tr><tr><td>E：last-of-type</td><td>指定类型 E 的最后一个</td></tr><tr><td>E：nth-of-type(n)</td><td>指定类型 E 的第 n 个</td></tr></tbody></table><p><strong>nth-child(n)</strong> 选择某个父元素的一个或多个特定的子元素</p><ul><li><p><strong>n可以是数字，关键字和公式</strong></p></li><li><p>n如果是数字，就是选择第 n 个子元素，里面数字从1开始…</p></li><li><p>n可以是关键字:even偶数，odd奇数</p></li><li><p>n可以是公式︰常见的公式如下(如果n是公式，则从O开始计算，但是第0个元素或者超出了元素的个数会被忽略)</p></li></ul><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数</td></tr><tr><td>2n+1</td><td>奇数</td></tr><tr><td>5n</td><td>5 10 15 …</td></tr><tr><td>n+5</td><td>从第5个开始 (包含第五个）到最后</td></tr><tr><td>-n+5</td><td>前5个 (包含第5个)…</td></tr></tbody></table><p><strong>区别：</strong></p><ol><li>nth-child对父元素里面所有孩子排序选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配</li><li>nth-of-type 对父元素里面指定子元素进行排序选择。先去匹配E，然后再根据E找第n个孩子</li></ol><p><strong>小结</strong></p><ul><li>结构伪类选择器一般用于选择父级里面的第几个孩子</li><li>nth-child 对父元素里面所有孩子排序选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配</li><li>nth-of-type 对父元素里面指定子元素进行排序选择。先去匹配E，然后再根据E找第n个孩子</li><li>关于 nth-child ( n ) 我们要知道n是从0开始计算的，要记住常用的公式</li><li>如果是无序列表，我们肯定用 nth-child 更多</li><li>类选择器、属性选择器、伪类选择器，权重为 10。</li></ul><h3 id="2-4伪元素选择器（重点-⭐⭐⭐"><a href="#2-4伪元素选择器（重点-⭐⭐⭐" class="headerlink" title="2.4伪元素选择器（重点)⭐⭐⭐"></a>2.4伪元素选择器（重点)⭐⭐⭐</h3><p>伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构。</p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>:after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><p><strong>注意∶</strong></p><ul><li><strong>before</strong> 和 <strong>after</strong>创建一个元素，但是<strong>属于行内元素</strong></li><li>新创建的这个元素在文档树中是找不到的，所以我们称为<strong>伪元素</strong></li><li><strong>语法: element:before { }</strong></li><li>before和after必须有<strong>content属性</strong></li><li>before在父元素内容的前面创建元素，after在父元素内容的后面插入元素</li><li><strong>伪元素选择器</strong>和<strong>标签选择器</strong>一样，<strong>权重为1</strong></li></ul><h3 id="2-5-CSS3盒子模型（固定宽度）"><a href="#2-5-CSS3盒子模型（固定宽度）" class="headerlink" title="2.5  CSS3盒子模型（固定宽度）"></a>2.5  CSS3盒子模型（固定宽度）</h3><p>CSS3中可以通过<strong>box-sizing</strong>来指定盒模型，有2个值:即可指定为<strong>content-box、border-box</strong>，这样我们计算盒子大小的方式就发生了改变。</p><p>可以分成两种情况：</p><ol><li>box-sizing: content-box盒子大小为width + padding + border (以前默认的)</li><li>box-sizing: border-box盒子大小为width</li></ol><p>如果盒子模型我们改为了<strong>box-sizing: border-box</strong> ，<strong>那padding和border就不会撑大盒子</strong>了(前提padding和border不会超过width宽度)</p><h3 id="2-6-CSS3其他特性-了解"><a href="#2-6-CSS3其他特性-了解" class="headerlink" title="2.6  CSS3其他特性(了解)"></a>2.6  CSS3其他特性(了解)</h3><p><strong>CSS3滤镜filter：</strong></p><p>filter CSS属性将模糊或颜色偏移等图形效果应用于元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">filter</span>：函数()； 例如: filter: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);  blur模糊处理数值越大越模糊<br></code></pre></td></tr></table></figure><p><strong>CSS3 calc函数：</strong></p><p>calc( ) 此CSS函数让你在声明CSS属性值时执行一些计算。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">80px</span>);<br></code></pre></td></tr></table></figure><p>括号里面可以使用 + - * / 来进行计算。</p><h3 id="2-7-CSS3过渡（重点"><a href="#2-7-CSS3过渡（重点" class="headerlink" title="2.7 CSS3过渡（重点)"></a>2.7 CSS3过渡（重点)</h3><p>过渡 ( transition) 是CSS3中具有颠覆性的特征之一，我们可以在不使用Flash 动画或JavaScript的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p><p>过渡动画:是从一个状态渐渐的过渡到另外一个状态</p><p>可以让我们页面更好看，更动感十足，虽然低版本浏览器不支持( ie9以下版本）但是不会影响页面布局。</p><p><strong>我们现在经常和 :hover 一起搭配使用。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>:要过渡的属性 花费时间 运动曲线 何时开始;<br><span class="hljs-comment">/* 如果想要写多个属性，利用 逗号 进行分割。  */</span><br><span class="hljs-comment">/* 如果想要全部属性都变化，属性写 all 就可以了。 */</span><br></code></pre></td></tr></table></figure><ol><li>属性︰想要变化的css属性，宽度高度背景颜色内外边距都可以。如果想要所有的属性都变化过渡，写一个all 就可以。</li><li>花费时间:单位是秒(必须写单位）比如0.5s</li><li>运动曲线︰默认是ease (可以省略)</li><li>何时开始︰单位是秒(必须写单位)可以设置延迟触发时间默认是0s（可以省略)</li></ol><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\运动曲线.png" height=200px  /><h2 id="1-品优购项目规划"><a href="#1-品优购项目规划" class="headerlink" title="1.品优购项目规划"></a>1.品优购项目规划</h2><h3 id="1-7-网站TDK三大标签SEO优化"><a href="#1-7-网站TDK三大标签SEO优化" class="headerlink" title="1.7 网站TDK三大标签SEO优化"></a>1.7 网站TDK三大标签SEO优化</h3><p><strong>SEO ( SearchEngine Optimization)<strong>汉译为</strong>搜索引擎优化</strong>，是一种利用搜索引擎的规则提高网站在有关搜索引擎内自然排名的方式。</p><p>SEO的目的是对<strong>网站进行深度的优化</strong>，从而帮助网站获取免费的流量，进而在搜索引擎上提升网站的排名，提高网站的知名度。</p><p>页面必须有三个标签用来符合SEO优化。</p><img src="C:\Users\Didiao\Pictures\Saved Pictures\学习图标\SEO.png" width="500px"/><h3 id="1-title-网站标题"><a href="#1-title-网站标题" class="headerlink" title="1.title 网站标题"></a>1.title 网站标题</h3><p>title具有不可替代性，是我们内页的第一个重要标签，是搜索引擎了解网页的入口和对网页主题归属的最佳判断点。</p><p>建议︰<strong>网站名（产品名)–网站的介绍</strong> (尽量不要超过30个汉字)</p><p>例如︰</p><ul><li>京东(JD.COM)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！</li><li>小米商城-小米5s、红米Note4、小米MIX、小米笔记本官方网站</li></ul><h3 id="2-description-网站说明"><a href="#2-description-网站说明" class="headerlink" title="2.description 网站说明"></a>2.description 网站说明</h3><p><strong>简要说明我们网站主要是做什么的。</strong></p><p>我们提倡，description作为网站的总体业务和主题概括，多采用 “我们是..”、“我们提供.”、“×××网作为.…”、“电话:010…”之类语句。</p><p>例如︰</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;京东JD.COM-专业的综合网上购物商城销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-keywords关键字"><a href="#3-keywords关键字" class="headerlink" title="3.keywords关键字"></a>3.keywords关键字</h3><p><strong>keywords是页面关键词，是搜索引擎的关注点之一。</strong></p><p>keywords 最好限制为6~8个关键词，关键词之间用英文逗号隔开，采用<strong>关键词1，关键词2</strong>的形式。</p><p>例如∶</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">“keywords</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;网上购物,网上商城手机笔记本,电脑MP3,CD,VCD,DV,相机,数码配件,手表,存储卡,京东&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>对于我们前端人员来说,我们只需要准备好这三个标签,具体里面的内容,有专门的SEO人员准备。</p><h3 id="2-1常用模块类名命名"><a href="#2-1常用模块类名命名" class="headerlink" title="2.1常用模块类名命名"></a>2.1常用模块类名命名</h3><p>以下是我们约定的命名模块，同学们可以直接使用以下类名即可。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>快捷导航栏</td><td>shortcut</td></tr><tr><td>头部</td><td>header</td></tr><tr><td>标志</td><td>logo</td></tr><tr><td>购物车</td><td>shopcar</td></tr><tr><td>搜索</td><td>search</td></tr><tr><td>热点词</td><td>hotwrods</td></tr><tr><td>导航</td><td>nav</td></tr><tr><td>导航左侧</td><td>dropdown包含.dd .dt</td></tr><tr><td>导航右侧</td><td>navitems</td></tr><tr><td>页面底部</td><td>footer</td></tr><tr><td>页面底部服务模块</td><td>mod_service</td></tr><tr><td>页面底部帮助模块</td><td>mod_help</td></tr><tr><td>页面底部版权模块</td><td>mod_copyright</td></tr></tbody></table><h2 id="LOGO-SEO-优化"><a href="#LOGO-SEO-优化" class="headerlink" title="LOGO SEO 优化"></a>LOGO SEO 优化</h2><ol><li>logo里面首先放一个h1标签，目的是为了提权，告诉搜索引擎，这个地方很重要。</li><li>h1里面再放一个链接，可以返回首页的，把logo的背景图片给链接即可。</li><li>为了搜索引擎收录我们，我们链接里面要放文字(网站名称），但是文字不要显示出来。</li></ol><ul><li>方法1 : text-indent移到盒子外面( text-indent:-9999px)，然后overflowhidden，淘宝的做法。</li><li>方法2∶直接给font-size:0; 就看不到文字了，京东的做法。</li></ul><ol start="4"><li>最后给链接一个title属性，这样鼠标放到logo上就可以看到提示文字了。</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows通用快捷键</title>
    <link href="/2021/09/28/windows%E9%80%9A%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/09/28/windows%E9%80%9A%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="通用快捷键"><a href="#通用快捷键" class="headerlink" title="通用快捷键"></a>通用快捷键</h3><p>Ctrl + Z : 撤销</p><p>Ctrl + X : 剪切</p><p>Ctrl + C : 复制</p><p>Ctrl + V : 粘贴</p><p>Ctrl + A : 全选</p><p>Ctrl + S : 保存</p><p>Ctrl + Y : 恢复</p><p>Ctrl + W : 关闭选项卡</p><p>Ctrl + - : 缩小</p><p>Ctrl + + : 放大</p><p>Ctrl + 0 : 还原缩放大小</p><p>Shift + Home : 从当前选中项选到第一项</p><p>Shift + End : 从当前选中项选到最后一项</p><p>Alt + Space : 打开窗口菜单</p><p>Alt + Space + R, M, S, N, X, C : 还原、移动、调整、最大化、最小化、关闭窗口</p><h3 id="Office-快捷键"><a href="#Office-快捷键" class="headerlink" title="Office 快捷键"></a>Office 快捷键</h3><p>Ctrl + B : 变粗</p><p>Ctrl + I : 斜体</p><p>Ctrl + U : 下划线</p><p>Ctrl + = : 下标</p><p>Ctrl + Shift + + : 上标</p><p>Ctrl + [ : 减小字号</p><p>Ctrl + ] : 增大字号</p><p>Ctrl + Shift + &lt; : 减小字号</p><p>Ctrl + Shift + &gt; : 增大字号</p><p>Ctrl + L : 左对齐</p><p>Ctrl + E : 居中</p><p>Ctrl + R : 右对齐</p><p>Ctrl + Backspace : 按单词删除</p><p>Ctrl + H : 查找/替换</p><p>Ctrl + F : 查找</p><p>F12 : 另存为</p><h3 id="Windows-快捷键"><a href="#Windows-快捷键" class="headerlink" title="Windows 快捷键"></a>Windows 快捷键</h3><p>Win + E : 资源管理器</p><p>Ctrl + Shift + Esc : 任务管理器</p><p>Win + R : 运行</p><p>Win + S : 搜索</p><p>Win + B : 任务栏图标</p><p>Win + D : 显示/隐藏桌面</p><p>Win + T : 任务栏固定项</p><p>Win + M : 最小化所有窗口！！</p><p>Win + L : 锁定计算机</p><p>Win + Tab : 切换窗口</p><p>Win + , : 预览桌面</p><p>Win + Enter : 启动讲述人</p><p>Win + Print Screen : 全屏截屏并保存到图片库中</p><p>Win + ↑ : 最大化</p><p>Win + Shift + ↑ : 将窗口拉伸至最大高度</p><p>Win + ↓ : 还原/最小化</p><p>Win + Shift + ← / → : 将窗口移动到另一个显示器上</p><p>Win + Home : 将所有非活动窗口最小化</p><p>Win + + : 全局放大</p><p>Win + - : 全局缩小</p><p>Win + Pause : 系统信息</p><p>Win + 1、2、3…… : 切换/启动任务栏项目</p><p>Win + Ctrl + 数字 : 切换活动窗口/启动任务栏项目</p><p>Win + Shift + 数字 : 启动任务栏项目（新实例）</p><p>Win + Alt + 数字 : 打开任务栏项目的跳转列表</p><p>Win + Ctrl + Shift + 数字 : 以管理员身份启动任务栏项目</p><p>左 Alt + 左 Shift + Print Screen : 启用高对比度</p><p>左 Alt + 左 Shift + Num Lock : 启用鼠标键</p><p>长按 Num Lock : 启用切换键</p><p>长按右 Shift 8秒 : 启用筛选键</p><p>连续点按 Shift 五次 : 启用粘滞键</p><p>Ctrl + Alt + . 或者 Ctrl + Alt + Delete : 安全选项卡</p><h3 id="Windows-10-快捷键"><a href="#Windows-10-快捷键" class="headerlink" title="Windows 10 快捷键"></a>Windows 10 快捷键</h3><p>Win + Space : 切换输入法</p><p>Ctrl + Alt + F : 微软拼音输入法切换简繁体</p><p>Win + I : 设置</p><p>Win + A : 通知中心</p><p>Win + W : Windows Ink 工作区</p><p>Win + K : 连接</p><p>Win + P : 投影设置</p><p>Win + U : 显示设置</p><p>Win + Q/S : 搜索</p><p>Win + C : Cortana</p><p>Win + X : “快速链接”菜单</p><p>Win + Shift + S : 自定义截屏</p><p>Win + Ctrl + D : 新建虚拟桌面</p><p>Win + Ctrl + F4 : 关闭当前虚拟桌面</p><p>Win + Ctrl + ← / → : 向左/右切换虚拟桌面</p><p>Win + ← / → : 窗口向左/右靠拢</p><p>Win + Shift + Enter : UWP 应用全屏</p><p>Win + Ctrl + Enter : 讲述人</p><p>常用的几个快捷键：</p><ul><li>关机：Win + X, U, U (先按组合键放开后再两次 U)</li><li>重启：Win + X, U, R (方法类似)</li><li>注销：Win + X, U, I (方法类似)</li><li>睡眠：Win + X, U, S (方法类似)</li><li>高级重启模式：在点击重启按钮，或者按下重启按钮 R 之前，要按住 Shift，再重启，直到出现请稍后三个字方可放开 Shift</li><li>打开 PowerShell (可以使用 CMD，命令提示符)：Win + X, A</li><li>“运行”对话框：Win + R</li><li>运行，以管理员身份运行：按住 Ctrl + Shift + Enter，或者按住 Ctrl + Shift 的同时点确定</li><li>锁定计算机：Win + L</li><li>打开设置：Win + I</li><li>打开资源管理器：Win + E</li><li>打开任务管理器：Ctrl + Shift + Esc</li><li>打开窗口菜单：Alt + Space</li><li>切换应用程序：Alt + Tab</li><li>切换输入法：Win + Space</li><li>系统截屏：Win + Shift + S</li><li>QQ 截屏：Ctrl + Alt + A</li><li>QQ 录屏：Ctrl + Als + S</li><li>关闭 QQ 对话框：Alt + C (QQ 要关闭消息同步模式)</li><li>谷歌浏览器关闭一个标签页：Ctrl + W</li><li>谷歌浏览器新建一个标签页：Ctrl + T</li><li>谷歌浏览器恢复刚才关闭的标签页：Ctr + Shift + T</li><li>谷歌浏览器新建窗口：Ctrl + N</li><li>谷歌浏览器新建无痕窗口：Ctrl + Shift + N</li><li>资源管理器，在当前路径打开命令提示符：按住 Shift，再右键</li><li>资源管理器，复制文件路径：按住 Shift，再右键，选择复制为路径</li><li>资源管理器，以其它用户身份运行程序：按住 Shift，再右键</li><li>资源管理器，更改缩略图大小：按住 Ctrl 再鼠标滚轮滑动（适用于其他程序更改缩放）</li></ul>]]></content>
    
    
    <categories>
      
      <category>备忘&amp;记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>菜鸟教程的404介绍</title>
    <link href="/2021/04/04/404/"/>
    <url>/2021/04/04/404/</url>
    
    <content type="html"><![CDATA[<h1 id="404-NOT-FOUND"><a href="#404-NOT-FOUND" class="headerlink" title="404 NOT FOUND!"></a>404 NOT FOUND!</h1><p>抱歉，沒有找到您需要的文章！！</p><p>404页面是网站必备的一个页面，它承载着用户体验与SEO优化的重任。404页面通常为用户访问了网站上不存在或已删除的页面，服务器返回的404错误。如果站长没有设置404页面，会出现死链接，蜘蛛爬行这类网址时，不利于搜索引擎收录。</p><h2 id="404-Not-Found-由来"><a href="#404-Not-Found-由来" class="headerlink" title="404 Not Found 由来"></a>404 Not Found 由来</h2><p>据说在第三次科技革命之前，互联网的形态就是一个大型的中央数据库，这个数据库就设置在404房间里面。那时候所有的请求都是由人工手动完成的，如果在数据库中没有找到请求者所需要的文件，或者由于请求者写错了文件编号，用户就会得到一个返回信息：room 404 : file not found。后来互联网兴起后，人们也就习惯了用404作为服务器未找到文件的错误代码了。当然实际考证传说中的room 404是不存在的。</p><h2 id="设置404页面的两大好处"><a href="#设置404页面的两大好处" class="headerlink" title="设置404页面的两大好处"></a>设置404页面的两大好处</h2><ul><li>引导用户不要关闭网站，增强用户体验。</li><li>防止网站出现死链接。</li></ul><p>查看更多 <a href="/http/http-status-codes.html">HTTP状态码介绍</a><br><img src="https://cdn.jsdelivr.net/gh/didiao-tcool/images/images/404.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>404</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2013/07/13/hello-world/"/>
    <url>/2013/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
